{
    "sourceFile": "Assets/Scripts/Rotation.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1703935465931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1703935524929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,8 @@\n {\r\n     public float rotationSpeed = 5f; // Adjust the speed of rotation\r\n     public float rotationClamp = 60f; // Adjust the maximum rotation angle\r\n \r\n-    private float currentRotation = 0f;\r\n-\r\n     // Update is called once per frame\r\n     void Update()\r\n     {\r\n         RotateWithMouse();\r\n@@ -29,15 +27,15 @@\n \r\n             // Calculate the desired rotation based on the direction\r\n             Quaternion lookRotation = Quaternion.LookRotation(targetDirection);\r\n \r\n-            // Smoothly interpolate towards the desired rotation\r\n-            transform.rotation = Quaternion.Slerp(transform.rotation, lookRotation, Time.deltaTime * rotationSpeed);\r\n+            // Use RotateTowards to rotate the turret smoothly\r\n+            Quaternion newRotation = Quaternion.RotateTowards(transform.rotation, lookRotation, rotationSpeed * Time.deltaTime);\r\n \r\n             // Extract the Y rotation to limit it within the specified range\r\n-            float clampedYRotation = Mathf.Clamp(transform.localEulerAngles.y, -rotationClamp, rotationClamp);\r\n+            float clampedYRotation = Mathf.Clamp(newRotation.eulerAngles.y, -rotationClamp, rotationClamp);\r\n \r\n             // Apply the rotation to the turret\r\n-            transform.localRotation = Quaternion.Euler(0f, clampedYRotation, 0f);\r\n+            transform.rotation = Quaternion.Euler(0f, clampedYRotation, 0f);\r\n         }\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1703935574880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,41 @@\n+using System.Collections;\r\n+using System.Collections.Generic;\r\n+using UnityEngine;\r\n+\r\n+public class TurretRotation : MonoBehaviour\r\n+{\r\n+    public float rotationSpeed = 5f; // Adjust the speed of rotation\r\n+    public float rotationClamp = 60f; // Adjust the maximum rotation angle\r\n+\r\n+    // Update is called once per frame\r\n+    void Update()\r\n+    {\r\n+        RotateWithMouse();\r\n+    }\r\n+\r\n+    void RotateWithMouse()\r\n+    {\r\n+        // Create a ray from the camera to the mouse cursor position\r\n+        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\r\n+        RaycastHit hit;\r\n+\r\n+        if (Physics.Raycast(ray, out hit))\r\n+        {\r\n+            // Get the direction from the turret position to the hit point\r\n+            Vector3 targetDirection = hit.point - transform.position;\r\n+            targetDirection.y = 0; // Ensure the turret stays level with the ground\r\n+\r\n+            // Calculate the desired rotation based on the direction and turret's current rotation\r\n+            Quaternion lookRotation = Quaternion.LookRotation(targetDirection) * Quaternion.Euler(0, 90, 0);\r\n+\r\n+            // Use RotateTowards to rotate the turret smoothly\r\n+            Quaternion newRotation = Quaternion.RotateTowards(transform.rotation, lookRotation, rotationSpeed * Time.deltaTime);\r\n+\r\n+            // Extract the Y rotation to limit it within the specified range\r\n+            float clampedYRotation = Mathf.Clamp(newRotation.eulerAngles.y, -rotationClamp, rotationClamp);\r\n+\r\n+            // Apply the rotation to the turret\r\n+            transform.rotation = Quaternion.Euler(0f, clampedYRotation, 0f);\r\n+        }\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1703935636461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,49 +6,16 @@\n {\r\n     public float rotationSpeed = 5f; // Adjust the speed of rotation\r\n     public float rotationClamp = 60f; // Adjust the maximum rotation angle\r\n \r\n-    // Update is called once per frame\r\n-    void Update()\r\n-    {\r\n-        RotateWithMouse();\r\n-    }\r\n+    private Quaternion initialRotation;\r\n \r\n-    void RotateWithMouse()\r\n+    // Start is called before the first frame update\r\n+    void Start()\r\n     {\r\n-        // Create a ray from the camera to the mouse cursor position\r\n-        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\r\n-        RaycastHit hit;\r\n-\r\n-        if (Physics.Raycast(ray, out hit))\r\n-        {\r\n-            // Get the direction from the turret position to the hit point\r\n-            Vector3 targetDirection = hit.point - transform.position;\r\n-            targetDirection.y = 0; // Ensure the turret stays level with the ground\r\n-\r\n-            // Calculate the desired rotation based on the direction and turret's current rotation\r\n-            Quaternion lookRotation = Quaternion.LookRotation(targetDirection) * Quaternion.Euler(0, 90, 0);\r\n-\r\n-            // Use RotateTowards to rotate the turret smoothly\r\n-            Quaternion newRotation = Quaternion.RotateTowards(transform.rotation, lookRotation, rotationSpeed * Time.deltaTime);\r\n-\r\n-            // Extract the Y rotation to limit it within the specified range\r\n-            float clampedYRotation = Mathf.Clamp(newRotation.eulerAngles.y, -rotationClamp, rotationClamp);\r\n-\r\n-            // Apply the rotation to the turret\r\n-            transform.rotation = Quaternion.Euler(0f, clampedYRotation, 0f);\r\n-        }\r\n+        initialRotation = transform.rotation;\r\n     }\r\n-}\r\n-using System.Collections;\r\n-using System.Collections.Generic;\r\n-using UnityEngine;\r\n \r\n-public class TurretRotation : MonoBehaviour\r\n-{\r\n-    public float rotationSpeed = 5f; // Adjust the speed of rotation\r\n-    public float rotationClamp = 60f; // Adjust the maximum rotation angle\r\n-\r\n     // Update is called once per frame\r\n     void Update()\r\n     {\r\n         RotateWithMouse();\r\n@@ -65,10 +32,10 @@\n             // Get the direction from the turret position to the hit point\r\n             Vector3 targetDirection = hit.point - transform.position;\r\n             targetDirection.y = 0; // Ensure the turret stays level with the ground\r\n \r\n-            // Calculate the desired rotation based on the direction\r\n-            Quaternion lookRotation = Quaternion.LookRotation(targetDirection);\r\n+            // Calculate the desired rotation based on the direction and turret's current rotation\r\n+            Quaternion lookRotation = Quaternion.LookRotation(targetDirection) * Quaternion.Euler(0, 90, 0);\r\n \r\n             // Use RotateTowards to rotate the turret smoothly\r\n             Quaternion newRotation = Quaternion.RotateTowards(transform.rotation, lookRotation, rotationSpeed * Time.deltaTime);\r\n \r\n@@ -77,6 +44,11 @@\n \r\n             // Apply the rotation to the turret\r\n             transform.rotation = Quaternion.Euler(0f, clampedYRotation, 0f);\r\n         }\r\n+        else\r\n+        {\r\n+            // If the mouse is not over an object, smoothly return the turret to its initial rotation\r\n+            transform.rotation = Quaternion.RotateTowards(transform.rotation, initialRotation, rotationSpeed * Time.deltaTime);\r\n+        }\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1703935670561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+using System.Collections;\r\n+using System.Collections.Generic;\r\n+using UnityEngine;\r\n+\r\n+public class TurretRotation : MonoBehaviour\r\n+{\r\n+    public float rotationSpeed = 5f; // Adjust the speed of rotation\r\n+    public float rotationClamp = 60f; // Adjust the maximum rotation angle\r\n+\r\n+    private float currentRotation = 0f;\r\n+\r\n+    // Update is called once per frame\r\n+    void Update()\r\n+    {\r\n+        RotateWithMouse();\r\n+    }\r\n+\r\n+    void RotateWithMouse()\r\n+    {\r\n+        float mouseX = Input.GetAxis(\"Mouse X\");\r\n+\r\n+        // Calculate the desired rotation based on mouse input\r\n+        float desiredRotation = currentRotation + mouseX * rotationSpeed;\r\n+\r\n+        // Clamp the rotation to the specified range\r\n+        desiredRotation = Mathf.Clamp(desiredRotation, -rotationClamp, rotationClamp);\r\n+\r\n+        // Smoothly interpolate towards the desired rotation\r\n+        currentRotation = Mathf.Lerp(currentRotation, desiredRotation, Time.deltaTime * rotationSpeed);\r\n+\r\n+        // Apply the rotation to the turret\r\n+        transform.localRotation = Quaternion.Euler(0f, currentRotation, 0f);\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1703935749991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,60 +29,15 @@\n         currentRotation = Mathf.Lerp(currentRotation, desiredRotation, Time.deltaTime * rotationSpeed);\r\n \r\n         // Apply the rotation to the turret\r\n         transform.localRotation = Quaternion.Euler(0f, currentRotation, 0f);\r\n-    }\r\n-}\r\n-using System.Collections;\r\n-using System.Collections.Generic;\r\n-using UnityEngine;\r\n \r\n-public class TurretRotation : MonoBehaviour\r\n-{\r\n-    public float rotationSpeed = 5f; // Adjust the speed of rotation\r\n-    public float rotationClamp = 60f; // Adjust the maximum rotation angle\r\n+        // Get the position of the mouse cursor in world space\r\n+        Vector3 mousePosition = Camera.main.ScreenToWorldPoint(new Vector3(Input.mousePosition.x, Input.mousePosition.y, Camera.main.nearClipPlane));\r\n \r\n-    private Quaternion initialRotation;\r\n+        // Calculate the direction from the turret to the mouse cursor\r\n+        Vector3 direction = mousePosition - transform.position;\r\n \r\n-    // Start is called before the first frame update\r\n-    void Start()\r\n-    {\r\n-        initialRotation = transform.rotation;\r\n+        // Rotate the turret to face the mouse cursor\r\n+        transform.rotation = Quaternion.LookRotation(direction, Vector3.up);\r\n     }\r\n-\r\n-    // Update is called once per frame\r\n-    void Update()\r\n-    {\r\n-        RotateWithMouse();\r\n-    }\r\n-\r\n-    void RotateWithMouse()\r\n-    {\r\n-        // Create a ray from the camera to the mouse cursor position\r\n-        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\r\n-        RaycastHit hit;\r\n-\r\n-        if (Physics.Raycast(ray, out hit))\r\n-        {\r\n-            // Get the direction from the turret position to the hit point\r\n-            Vector3 targetDirection = hit.point - transform.position;\r\n-            targetDirection.y = 0; // Ensure the turret stays level with the ground\r\n-\r\n-            // Calculate the desired rotation based on the direction and turret's current rotation\r\n-            Quaternion lookRotation = Quaternion.LookRotation(targetDirection) * Quaternion.Euler(0, 90, 0);\r\n-\r\n-            // Use RotateTowards to rotate the turret smoothly\r\n-            Quaternion newRotation = Quaternion.RotateTowards(transform.rotation, lookRotation, rotationSpeed * Time.deltaTime);\r\n-\r\n-            // Extract the Y rotation to limit it within the specified range\r\n-            float clampedYRotation = Mathf.Clamp(newRotation.eulerAngles.y, -rotationClamp, rotationClamp);\r\n-\r\n-            // Apply the rotation to the turret\r\n-            transform.rotation = Quaternion.Euler(0f, clampedYRotation, 0f);\r\n-        }\r\n-        else\r\n-        {\r\n-            // If the mouse is not over an object, smoothly return the turret to its initial rotation\r\n-            transform.rotation = Quaternion.RotateTowards(transform.rotation, initialRotation, rotationSpeed * Time.deltaTime);\r\n-        }\r\n-    }\r\n }\r\n"
                },
                {
                    "date": 1703935820656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+using System.Collections;\r\n+using System.Collections.Generic;\r\n+using UnityEngine;\r\n+\r\n+public class TurretRotation : MonoBehaviour\r\n+{\r\n+    public float rotationSpeed = 5f; // Adjust the speed of rotation\r\n+    public float rotationClamp = 60f; // Adjust the maximum rotation angle\r\n+\r\n+    private float currentRotation = 0f;\r\n+\r\n+    // Update is called once per frame\r\n+    void Update()\r\n+    {\r\n+        RotateWithMouse();\r\n+    }\r\n+\r\n+    void RotateWithMouse()\r\n+    {\r\n+        float mouseX = Input.GetAxis(\"Mouse X\");\r\n+\r\n+        // Calculate the desired rotation based on mouse input\r\n+        float desiredRotation = currentRotation + mouseX * rotationSpeed;\r\n+\r\n+        // Clamp the rotation to the specified range\r\n+        desiredRotation = Mathf.Clamp(desiredRotation, -rotationClamp, rotationClamp);\r\n+\r\n+        // Smoothly interpolate towards the desired rotation\r\n+        currentRotation = Mathf.Lerp(currentRotation, desiredRotation, Time.deltaTime * rotationSpeed);\r\n+\r\n+        // Apply the rotation to the turret\r\n+        transform.localRotation = Quaternion.Euler(0f, currentRotation, 0f);\r\n+\r\n+        // Get the position of the mouse cursor in world space\r\n+        Vector3 mousePosition = Camera.main.ScreenToWorldPoint(new Vector3(Input.mousePosition.x, Input.mousePosition.y, Camera.main.nearClipPlane));\r\n+\r\n+        // Calculate the direction from the turret to the mouse cursor\r\n+        Vector3 direction = mousePosition - transform.position;\r\n+\r\n+        // Rotate the turret to face the mouse cursor\r\n+        transform.rotation = Quaternion.LookRotation(direction, Vector3.forward);\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1703935840285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,15 +29,6 @@\n         currentRotation = Mathf.Lerp(currentRotation, desiredRotation, Time.deltaTime * rotationSpeed);\r\n \r\n         // Apply the rotation to the turret\r\n         transform.localRotation = Quaternion.Euler(0f, currentRotation, 0f);\r\n-\r\n-        // Get the position of the mouse cursor in world space\r\n-        Vector3 mousePosition = Camera.main.ScreenToWorldPoint(new Vector3(Input.mousePosition.x, Input.mousePosition.y, Camera.main.nearClipPlane));\r\n-\r\n-        // Calculate the direction from the turret to the mouse cursor\r\n-        Vector3 direction = mousePosition - transform.position;\r\n-\r\n-        // Rotate the turret to face the mouse cursor\r\n-        transform.rotation = Quaternion.LookRotation(direction, Vector3.forward);\r\n     }\r\n }\r\n"
                }
            ],
            "date": 1703935465931,
            "name": "Commit-0",
            "content": "using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\n\r\npublic class TurretRotation : MonoBehaviour\r\n{\r\n    public float rotationSpeed = 5f; // Adjust the speed of rotation\r\n    public float rotationClamp = 60f; // Adjust the maximum rotation angle\r\n\r\n    private float currentRotation = 0f;\r\n\r\n    // Update is called once per frame\r\n    void Update()\r\n    {\r\n        RotateWithMouse();\r\n    }\r\n\r\n    void RotateWithMouse()\r\n    {\r\n        // Create a ray from the camera to the mouse cursor position\r\n        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\r\n        RaycastHit hit;\r\n\r\n        if (Physics.Raycast(ray, out hit))\r\n        {\r\n            // Get the direction from the turret position to the hit point\r\n            Vector3 targetDirection = hit.point - transform.position;\r\n            targetDirection.y = 0; // Ensure the turret stays level with the ground\r\n\r\n            // Calculate the desired rotation based on the direction\r\n            Quaternion lookRotation = Quaternion.LookRotation(targetDirection);\r\n\r\n            // Smoothly interpolate towards the desired rotation\r\n            transform.rotation = Quaternion.Slerp(transform.rotation, lookRotation, Time.deltaTime * rotationSpeed);\r\n\r\n            // Extract the Y rotation to limit it within the specified range\r\n            float clampedYRotation = Mathf.Clamp(transform.localEulerAngles.y, -rotationClamp, rotationClamp);\r\n\r\n            // Apply the rotation to the turret\r\n            transform.localRotation = Quaternion.Euler(0f, clampedYRotation, 0f);\r\n        }\r\n    }\r\n}\r\n"
        }
    ]
}