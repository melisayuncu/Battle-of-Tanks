{
    "sourceFile": "Assets/Scripts/PlayerHealth.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1703772306470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1703931448102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,69 +1,73 @@\n using System.Collections;\r\n using UnityEngine;\r\n using UnityEngine.SceneManagement;\r\n-using UnityEngine.UI;\r\n \r\n-public class PlayerHealth : MonoBehaviour\r\n+public class EnemyHealth : MonoBehaviour\r\n {\r\n-    public int maxHealth = 10;\r\n+    public int maxHealth = 5;\r\n     private int currentHealth;\r\n-    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n \r\n+    public delegate void EnemyKilled();\r\n+    public static event EnemyKilled onEnemyKilled;\r\n+\r\n     public GameObject explosionPrefab;\r\n     private AudioSource explosionAudio;\r\n     private ParticleSystem explosionParticles;\r\n \r\n-    void Start()\r\n+    void Awake()\r\n     {\r\n-        currentHealth = maxHealth;\r\n-\r\n-        // Set the initial health value on the slider\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.maxValue = maxHealth;\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n         explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n         explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n         explosionParticles.gameObject.SetActive(false);\r\n     }\r\n \r\n+    void Start()\r\n+    {\r\n+        currentHealth = maxHealth;\r\n+    }\r\n+\r\n     public void TakeDamage(int damage)\r\n     {\r\n         currentHealth -= damage;\r\n \r\n-        // Update the health slider (if you have one)\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n         if (currentHealth <= 0)\r\n         {\r\n             Die();\r\n         }\r\n     }\r\n \r\n     void Die()\r\n     {\r\n-        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n-        Debug.Log(\"Player has died!\");\r\n-        SceneManager.LoadScene(2);\r\n+        if (gameObject != null)\r\n+        {\r\n+            StartCoroutine(ExplodeAfterDelay(0.1f)); // Delay before exploding (adjust as needed)\r\n+        }\r\n+    }\r\n \r\n+    IEnumerator ExplodeAfterDelay(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+\r\n+        // Explode\r\n         explosionParticles.transform.position = transform.position;\r\n         explosionParticles.gameObject.SetActive(true);\r\n         explosionParticles.Play();\r\n         explosionAudio.Play();\r\n \r\n-        StartCoroutine(MyCoroutine(3f));\r\n+        // Destroy the object after the explosion\r\n+        yield return new WaitForSeconds(explosionParticles.main.duration);\r\n+        Destroy(gameObject);\r\n \r\n-    }\r\n+        // Notify that the enemy was killed\r\n+        if (onEnemyKilled != null)\r\n+        {\r\n+            onEnemyKilled();\r\n+        }\r\n \r\n-    IEnumerator MyCoroutine(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\r\n+        // Delay before transitioning to the game over scene\r\n+        yield return new WaitForSeconds(1f);\r\n \r\n+        // Transition to the game over scene\r\n+        SceneManager.LoadScene(\"GameOverScene\"); // Replace \"GameOverScene\" with the actual scene name\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1703931537680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,73 +1,66 @@\n using System.Collections;\r\n using UnityEngine;\r\n using UnityEngine.SceneManagement;\r\n+using UnityEngine.UI;\r\n \r\n-public class EnemyHealth : MonoBehaviour\r\n+public class PlayerHealth : MonoBehaviour\r\n {\r\n-    public int maxHealth = 5;\r\n+    public int maxHealth = 10;\r\n     private int currentHealth;\r\n+    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n \r\n-    public delegate void EnemyKilled();\r\n-    public static event EnemyKilled onEnemyKilled;\r\n-\r\n     public GameObject explosionPrefab;\r\n     private AudioSource explosionAudio;\r\n     private ParticleSystem explosionParticles;\r\n \r\n-    void Awake()\r\n+    void Start()\r\n     {\r\n+        currentHealth = maxHealth;\r\n+\r\n+        // Set the initial health value on the slider\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.maxValue = maxHealth;\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n         explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n         explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n         explosionParticles.gameObject.SetActive(false);\r\n     }\r\n \r\n-    void Start()\r\n-    {\r\n-        currentHealth = maxHealth;\r\n-    }\r\n-\r\n     public void TakeDamage(int damage)\r\n     {\r\n         currentHealth -= damage;\r\n \r\n+        // Update the health slider (if you have one)\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n         if (currentHealth <= 0)\r\n         {\r\n             Die();\r\n         }\r\n     }\r\n \r\n     void Die()\r\n     {\r\n-        if (gameObject != null)\r\n-        {\r\n-            StartCoroutine(ExplodeAfterDelay(0.1f)); // Delay before exploding (adjust as needed)\r\n-        }\r\n-    }\r\n+        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n+        Debug.Log(\"Player has died!\");\r\n \r\n-    IEnumerator ExplodeAfterDelay(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-\r\n-        // Explode\r\n         explosionParticles.transform.position = transform.position;\r\n         explosionParticles.gameObject.SetActive(true);\r\n         explosionParticles.Play();\r\n         explosionAudio.Play();\r\n \r\n-        // Destroy the object after the explosion\r\n-        yield return new WaitForSeconds(explosionParticles.main.duration);\r\n-        Destroy(gameObject);\r\n+        StartCoroutine(MyCoroutine(3f)); // Delay before transitioning to the game over scene\r\n+    }\r\n \r\n-        // Notify that the enemy was killed\r\n-        if (onEnemyKilled != null)\r\n-        {\r\n-            onEnemyKilled();\r\n-        }\r\n-\r\n-        // Delay before transitioning to the game over scene\r\n-        yield return new WaitForSeconds(1f);\r\n-\r\n-        // Transition to the game over scene\r\n-        SceneManager.LoadScene(\"GameOverScene\"); // Replace \"GameOverScene\" with the actual scene name\r\n+    IEnumerator MyCoroutine(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+        SceneManager.LoadScene(2); // Replace 2 with the actual build index or scene name for the game over scene\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1703931558378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,67 @@\n+using System.Collections;\r\n+using UnityEngine;\r\n+using UnityEngine.SceneManagement;\r\n+using UnityEngine.UI;\r\n+\r\n+public class PlayerHealth : MonoBehaviour\r\n+{\r\n+    public int maxHealth = 10;\r\n+    private int currentHealth;\r\n+    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n+\r\n+    public GameObject explosionPrefab;\r\n+    private AudioSource explosionAudio;\r\n+    private ParticleSystem explosionParticles;\r\n+\r\n+    void Start()\r\n+    {\r\n+        currentHealth = maxHealth;\r\n+\r\n+        // Set the initial health value on the slider\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.maxValue = maxHealth;\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        explosionParticles.gameObject.SetActive(false);\r\n+    }\r\n+\r\n+    public void TakeDamage(int damage)\r\n+    {\r\n+        currentHealth -= damage;\r\n+\r\n+        // Update the health slider (if you have one)\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        if (currentHealth <= 0)\r\n+        {\r\n+            Die();\r\n+        }\r\n+    }\r\n+\r\n+    void Die()\r\n+    {\r\n+        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n+        Debug.Log(\"Player has died!\");\r\n+\r\n+        explosionParticles.transform.position = transform.position;\r\n+        explosionParticles.gameObject.SetActive(true);\r\n+        explosionParticles.Play();\r\n+        explosionAudio.Play();\r\n+\r\n+        StartCoroutine(MyCoroutine(3f)); // Delay before transitioning to the game over scene\r\n+    }\r\n+\r\n+    IEnumerator MyCoroutine(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+                SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\r\n+\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1703931649575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+using System.Collections;\r\n+using UnityEngine;\r\n+using UnityEngine.SceneManagement;\r\n+using UnityEngine.UI;\r\n+\r\n+public class PlayerHealth : MonoBehaviour\r\n+{\r\n+    public int maxHealth = 10;\r\n+    private int currentHealth;\r\n+    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n+\r\n+    public GameObject explosionPrefab;\r\n+    private AudioSource explosionAudio;\r\n+    private ParticleSystem explosionParticles;\r\n+\r\n+    void Start()\r\n+    {\r\n+        currentHealth = maxHealth;\r\n+\r\n+        // Set the initial health value on the slider\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.maxValue = maxHealth;\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        explosionParticles.gameObject.SetActive(false);\r\n+    }\r\n+\r\n+    public void TakeDamage(int damage)\r\n+    {\r\n+        currentHealth -= damage;\r\n+\r\n+        // Update the health slider (if you have one)\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        if (currentHealth <= 0)\r\n+        {\r\n+            Die();\r\n+        }\r\n+    }\r\n+\r\n+    void Die()\r\n+    {\r\n+        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n+        Debug.Log(\"Player has died!\");\r\n+\r\n+        explosionParticles.transform.position = transform.position;\r\n+        explosionParticles.gameObject.SetActive(true);\r\n+        explosionParticles.Play();\r\n+        explosionAudio.Play();\r\n+\r\n+        StartCoroutine(MyCoroutine(3f));\r\n+\r\n+    }\r\n+\r\n+    IEnumerator MyCoroutine(float delay)\r\n+    {\r\n+        // Wait for the explosion duration\r\n+        yield return new WaitForSeconds(explosionParticles.main.duration);\r\n+\r\n+        // Hide the player object\r\n+        gameObject.SetActive(false);\r\n+\r\n+        // Wait for an additional 1 second\r\n+        yield return new WaitForSeconds(1f);\r\n+\r\n+        // Load the game loading scene\r\n+        SceneManager.LoadScene(2); // Replace 2 with the actual build index or scene name for the game loading scene\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1703931680761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,140 +70,7 @@\n         // Wait for an additional 1 second\r\n         yield return new WaitForSeconds(1f);\r\n \r\n         // Load the game loading scene\r\n-        SceneManager.LoadScene(2); // Replace 2 with the actual build index or scene name for the game loading scene\r\n+        SceneManager.LoadScene(GameOver); // Replace 2 with the actual build index or scene name for the game loading scene\r\n     }\r\n }\r\n-using System.Collections;\r\n-using UnityEngine;\r\n-using UnityEngine.SceneManagement;\r\n-using UnityEngine.UI;\r\n-\r\n-public class PlayerHealth : MonoBehaviour\r\n-{\r\n-    public int maxHealth = 10;\r\n-    private int currentHealth;\r\n-    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n-\r\n-    public GameObject explosionPrefab;\r\n-    private AudioSource explosionAudio;\r\n-    private ParticleSystem explosionParticles;\r\n-\r\n-    void Start()\r\n-    {\r\n-        currentHealth = maxHealth;\r\n-\r\n-        // Set the initial health value on the slider\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.maxValue = maxHealth;\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-        explosionParticles.gameObject.SetActive(false);\r\n-    }\r\n-\r\n-    public void TakeDamage(int damage)\r\n-    {\r\n-        currentHealth -= damage;\r\n-\r\n-        // Update the health slider (if you have one)\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        if (currentHealth <= 0)\r\n-        {\r\n-            Die();\r\n-        }\r\n-    }\r\n-\r\n-    void Die()\r\n-    {\r\n-        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n-        Debug.Log(\"Player has died!\");\r\n-\r\n-        explosionParticles.transform.position = transform.position;\r\n-        explosionParticles.gameObject.SetActive(true);\r\n-        explosionParticles.Play();\r\n-        explosionAudio.Play();\r\n-\r\n-        StartCoroutine(MyCoroutine(3f)); // Delay before transitioning to the game over scene\r\n-    }\r\n-\r\n-    IEnumerator MyCoroutine(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-                SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\r\n-\r\n-    }\r\n-}\r\n-using System.Collections;\r\n-using UnityEngine;\r\n-using UnityEngine.SceneManagement;\r\n-using UnityEngine.UI;\r\n-\r\n-public class PlayerHealth : MonoBehaviour\r\n-{\r\n-    public int maxHealth = 10;\r\n-    private int currentHealth;\r\n-    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n-\r\n-    public GameObject explosionPrefab;\r\n-    private AudioSource explosionAudio;\r\n-    private ParticleSystem explosionParticles;\r\n-\r\n-    void Start()\r\n-    {\r\n-        currentHealth = maxHealth;\r\n-\r\n-        // Set the initial health value on the slider\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.maxValue = maxHealth;\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-        explosionParticles.gameObject.SetActive(false);\r\n-    }\r\n-\r\n-    public void TakeDamage(int damage)\r\n-    {\r\n-        currentHealth -= damage;\r\n-\r\n-        // Update the health slider (if you have one)\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        if (currentHealth <= 0)\r\n-        {\r\n-            Die();\r\n-        }\r\n-    }\r\n-\r\n-    void Die()\r\n-    {\r\n-        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n-        Debug.Log(\"Player has died!\");\r\n-\r\n-        explosionParticles.transform.position = transform.position;\r\n-        explosionParticles.gameObject.SetActive(true);\r\n-        explosionParticles.Play();\r\n-        explosionAudio.Play();\r\n-\r\n-        StartCoroutine(MyCoroutine(3f)); // Delay before transitioning to the game over scene\r\n-    }\r\n-\r\n-    IEnumerator MyCoroutine(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-        SceneManager.LoadScene(2); // Replace 2 with the actual build index or scene name for the game over scene\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1703931687248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+using System.Collections;\r\n+using UnityEngine;\r\n+using UnityEngine.SceneManagement;\r\n+using UnityEngine.UI;\r\n+\r\n+public class PlayerHealth : MonoBehaviour\r\n+{\r\n+    public int maxHealth = 10;\r\n+    private int currentHealth;\r\n+    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n+\r\n+    public GameObject explosionPrefab;\r\n+    private AudioSource explosionAudio;\r\n+    private ParticleSystem explosionParticles;\r\n+\r\n+    void Start()\r\n+    {\r\n+        currentHealth = maxHealth;\r\n+\r\n+        // Set the initial health value on the slider\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.maxValue = maxHealth;\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        explosionParticles.gameObject.SetActive(false);\r\n+    }\r\n+\r\n+    public void TakeDamage(int damage)\r\n+    {\r\n+        currentHealth -= damage;\r\n+\r\n+        // Update the health slider (if you have one)\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        if (currentHealth <= 0)\r\n+        {\r\n+            Die();\r\n+        }\r\n+    }\r\n+\r\n+    void Die()\r\n+    {\r\n+        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n+        Debug.Log(\"Player has died!\");\r\n+\r\n+        explosionParticles.transform.position = transform.position;\r\n+        explosionParticles.gameObject.SetActive(true);\r\n+        explosionParticles.Play();\r\n+        explosionAudio.Play();\r\n+\r\n+        StartCoroutine(MyCoroutine(3f));\r\n+\r\n+    }\r\n+\r\n+    IEnumerator MyCoroutine(float delay)\r\n+    {\r\n+        // Wait for the explosion duration\r\n+        yield return new WaitForSeconds(explosionParticles.main.duration);\r\n+\r\n+        // Hide the player object\r\n+        gameObject.SetActive(false);\r\n+\r\n+        // Wait for an additional 1 second\r\n+        yield return new WaitForSeconds(1f);\r\n+\r\n+        // Load the game loading scene\r\n+        SceneManager.LoadScene(Game Over); // Replace 2 with the actual build index or scene name for the game loading scene\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1703931692559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,83 +70,7 @@\n         // Wait for an additional 1 second\r\n         yield return new WaitForSeconds(1f);\r\n \r\n         // Load the game loading scene\r\n-        SceneManager.LoadScene(Game Over); // Replace 2 with the actual build index or scene name for the game loading scene\r\n+        SceneManager.LoadScene(\"GameOver\"); // Replace 2 with the actual build index or scene name for the game loading scene\r\n     }\r\n }\r\n-using System.Collections;\r\n-using UnityEngine;\r\n-using UnityEngine.SceneManagement;\r\n-using UnityEngine.UI;\r\n-\r\n-public class PlayerHealth : MonoBehaviour\r\n-{\r\n-    public int maxHealth = 10;\r\n-    private int currentHealth;\r\n-    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n-\r\n-    public GameObject explosionPrefab;\r\n-    private AudioSource explosionAudio;\r\n-    private ParticleSystem explosionParticles;\r\n-\r\n-    void Start()\r\n-    {\r\n-        currentHealth = maxHealth;\r\n-\r\n-        // Set the initial health value on the slider\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.maxValue = maxHealth;\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-        explosionParticles.gameObject.SetActive(false);\r\n-    }\r\n-\r\n-    public void TakeDamage(int damage)\r\n-    {\r\n-        currentHealth -= damage;\r\n-\r\n-        // Update the health slider (if you have one)\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        if (currentHealth <= 0)\r\n-        {\r\n-            Die();\r\n-        }\r\n-    }\r\n-\r\n-    void Die()\r\n-    {\r\n-        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n-        Debug.Log(\"Player has died!\");\r\n-\r\n-        explosionParticles.transform.position = transform.position;\r\n-        explosionParticles.gameObject.SetActive(true);\r\n-        explosionParticles.Play();\r\n-        explosionAudio.Play();\r\n-\r\n-        StartCoroutine(MyCoroutine(3f));\r\n-\r\n-    }\r\n-\r\n-    IEnumerator MyCoroutine(float delay)\r\n-    {\r\n-        // Wait for the explosion duration\r\n-        yield return new WaitForSeconds(explosionParticles.main.duration);\r\n-\r\n-        // Hide the player object\r\n-        gameObject.SetActive(false);\r\n-\r\n-        // Wait for an additional 1 second\r\n-        yield return new WaitForSeconds(1f);\r\n-\r\n-        // Load the game loading scene\r\n-        SceneManager.LoadScene(GameOver); // Replace 2 with the actual build index or scene name for the game loading scene\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1703931746110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+using System.Collections;\r\n+using UnityEngine;\r\n+using UnityEngine.SceneManagement;\r\n+using UnityEngine.UI;\r\n+\r\n+public class PlayerHealth : MonoBehaviour\r\n+{\r\n+    public int maxHealth = 10;\r\n+    private int currentHealth;\r\n+    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n+\r\n+    public GameObject explosionPrefab;\r\n+    private AudioSource explosionAudio;\r\n+    private ParticleSystem explosionParticles;\r\n+\r\n+    void Start()\r\n+    {\r\n+        currentHealth = maxHealth;\r\n+\r\n+        // Set the initial health value on the slider\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.maxValue = maxHealth;\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        explosionParticles.gameObject.SetActive(false);\r\n+    }\r\n+\r\n+    public void TakeDamage(int damage)\r\n+    {\r\n+        currentHealth -= damage;\r\n+\r\n+        // Update the health slider (if you have one)\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        if (currentHealth <= 0)\r\n+        {\r\n+            Die();\r\n+        }\r\n+    }\r\n+\r\n+    void Die()\r\n+    {\r\n+        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n+        Debug.Log(\"Player has died!\");\r\n+\r\n+        explosionParticles.transform.position = transform.position;\r\n+        explosionParticles.gameObject.SetActive(true);\r\n+        explosionParticles.Play();\r\n+        explosionAudio.Play();\r\n+\r\n+        StartCoroutine(MyCoroutine(3f));\r\n+\r\n+    }\r\n+\r\n+    IEnumerator MyCoroutine(float delay)\r\n+    {\r\n+        // Wait for the explosion duration\r\n+        yield return new WaitForSeconds(explosionParticles.main.duration);\r\n+\r\n+        // Hide the player object\r\n+        gameObject.SetActive(false);\r\n+\r\n+        // Wait for an additional 1 second\r\n+        yield return new WaitForSeconds(1f);\r\n+\r\n+        // Load the game loading scene\r\n+        SceneManager.LoadScene(\"GameOver\"); \r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1703931807915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,10 +54,9 @@\n         explosionParticles.gameObject.SetActive(true);\r\n         explosionParticles.Play();\r\n         explosionAudio.Play();\r\n \r\n-        StartCoroutine(MyCoroutine(3f));\r\n-\r\n+        StartCoroutine(MyCoroutine(1f)); // Adjust the delay as needed\r\n     }\r\n \r\n     IEnumerator MyCoroutine(float delay)\r\n     {\r\n@@ -66,87 +65,11 @@\n \r\n         // Hide the player object\r\n         gameObject.SetActive(false);\r\n \r\n-        // Wait for an additional 1 second\r\n-        yield return new WaitForSeconds(1f);\r\n+        // Wait for an additional delay\r\n+        yield return new WaitForSeconds(delay);\r\n \r\n-        // Load the game loading scene\r\n-        SceneManager.LoadScene(\"GameOver\"); \r\n+        // Load the game over scene\r\n+        SceneManager.LoadScene(\"GameOver\");\r\n     }\r\n }\r\n-using System.Collections;\r\n-using UnityEngine;\r\n-using UnityEngine.SceneManagement;\r\n-using UnityEngine.UI;\r\n-\r\n-public class PlayerHealth : MonoBehaviour\r\n-{\r\n-    public int maxHealth = 10;\r\n-    private int currentHealth;\r\n-    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n-\r\n-    public GameObject explosionPrefab;\r\n-    private AudioSource explosionAudio;\r\n-    private ParticleSystem explosionParticles;\r\n-\r\n-    void Start()\r\n-    {\r\n-        currentHealth = maxHealth;\r\n-\r\n-        // Set the initial health value on the slider\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.maxValue = maxHealth;\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-        explosionParticles.gameObject.SetActive(false);\r\n-    }\r\n-\r\n-    public void TakeDamage(int damage)\r\n-    {\r\n-        currentHealth -= damage;\r\n-\r\n-        // Update the health slider (if you have one)\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        if (currentHealth <= 0)\r\n-        {\r\n-            Die();\r\n-        }\r\n-    }\r\n-\r\n-    void Die()\r\n-    {\r\n-        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n-        Debug.Log(\"Player has died!\");\r\n-\r\n-        explosionParticles.transform.position = transform.position;\r\n-        explosionParticles.gameObject.SetActive(true);\r\n-        explosionParticles.Play();\r\n-        explosionAudio.Play();\r\n-\r\n-        StartCoroutine(MyCoroutine(3f));\r\n-\r\n-    }\r\n-\r\n-    IEnumerator MyCoroutine(float delay)\r\n-    {\r\n-        // Wait for the explosion duration\r\n-        yield return new WaitForSeconds(explosionParticles.main.duration);\r\n-\r\n-        // Hide the player object\r\n-        gameObject.SetActive(false);\r\n-\r\n-        // Wait for an additional 1 second\r\n-        yield return new WaitForSeconds(1f);\r\n-\r\n-        // Load the game loading scene\r\n-        SceneManager.LoadScene(\"GameOver\"); // Replace 2 with the actual build index or scene name for the game loading scene\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1703931846518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,28 +48,22 @@\n     void Die()\r\n     {\r\n         // Add any game over logic here (e.g., restart the level, show game over screen)\r\n         Debug.Log(\"Player has died!\");\r\n+        SceneManager.LoadScene(2);\r\n \r\n         explosionParticles.transform.position = transform.position;\r\n         explosionParticles.gameObject.SetActive(true);\r\n         explosionParticles.Play();\r\n         explosionAudio.Play();\r\n \r\n-        StartCoroutine(MyCoroutine(1f)); // Adjust the delay as needed\r\n+        StartCoroutine(MyCoroutine(3f));\r\n+\r\n     }\r\n \r\n     IEnumerator MyCoroutine(float delay)\r\n     {\r\n-        // Wait for the explosion duration\r\n-        yield return new WaitForSeconds(explosionParticles.main.duration);\r\n-\r\n-        // Hide the player object\r\n-        gameObject.SetActive(false);\r\n-\r\n-        // Wait for an additional delay\r\n         yield return new WaitForSeconds(delay);\r\n+        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\r\n \r\n-        // Load the game over scene\r\n-        SceneManager.LoadScene(\"GameOver\");\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1703932492386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,9 @@\n \r\n     void Die()\r\n     {\r\n         // Add any game over logic here (e.g., restart the level, show game over screen)\r\n-        Debug.Log(\"Player has died!\");\r\n-        SceneManager.LoadScene(2);\r\n+        \r\n \r\n         explosionParticles.transform.position = transform.position;\r\n         explosionParticles.gameObject.SetActive(true);\r\n         explosionParticles.Play();\r\n"
                },
                {
                    "date": 1703932498863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,11 @@\n         explosionParticles.gameObject.SetActive(true);\r\n         explosionParticles.Play();\r\n         explosionAudio.Play();\r\n \r\n-        StartCoroutine(MyCoroutine(3f));\r\n+        StartCoroutine(MyCoroutine(2f));\r\n+        Debug.Log(\"Player has died!\");\r\n+        SceneManager.LoadScene(2);\r\n \r\n     }\r\n \r\n     IEnumerator MyCoroutine(float delay)\r\n"
                },
                {
                    "date": 1703932504218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         explosionAudio.Play();\r\n \r\n         StartCoroutine(MyCoroutine(2f));\r\n         Debug.Log(\"Player has died!\");\r\n-        SceneManager.LoadScene(2);\r\n+        SceneManager.LoadScene(\"Game\");\r\n \r\n     }\r\n \r\n     IEnumerator MyCoroutine(float delay)\r\n"
                },
                {
                    "date": 1703932689916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         explosionAudio.Play();\r\n \r\n         StartCoroutine(MyCoroutine(2f));\r\n         Debug.Log(\"Player has died!\");\r\n-        SceneManager.LoadScene(\"Game\");\r\n+        SceneManager.LoadScene(\"GameOver\");\r\n \r\n     }\r\n \r\n     IEnumerator MyCoroutine(float delay)\r\n"
                },
                {
                    "date": 1703932889973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,10 @@\n         explosionParticles.gameObject.SetActive(true);\r\n         explosionParticles.Play();\r\n         explosionAudio.Play();\r\n \r\n+         Destroy(gameObject);\r\n+\r\n         StartCoroutine(MyCoroutine(2f));\r\n         Debug.Log(\"Player has died!\");\r\n         SceneManager.LoadScene(\"GameOver\");\r\n \r\n"
                },
                {
                    "date": 1703933039819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,8 @@\n     public int maxHealth = 10;\r\n     private int currentHealth;\r\n     public Slider healthSlider; // Reference to the health slider (if you have one)\r\n \r\n-    public GameObject explosionPrefab;\r\n-    private AudioSource explosionAudio;\r\n-    private ParticleSystem explosionParticles;\r\n-\r\n     void Start()\r\n     {\r\n         currentHealth = maxHealth;\r\n \r\n@@ -22,12 +18,8 @@\n         {\r\n             healthSlider.maxValue = maxHealth;\r\n             healthSlider.value = currentHealth;\r\n         }\r\n-\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-        explosionParticles.gameObject.SetActive(false);\r\n     }\r\n \r\n     public void TakeDamage(int damage)\r\n     {\r\n@@ -47,26 +39,8 @@\n \r\n     void Die()\r\n     {\r\n         // Add any game over logic here (e.g., restart the level, show game over screen)\r\n-        \r\n-\r\n-        explosionParticles.transform.position = transform.position;\r\n-        explosionParticles.gameObject.SetActive(true);\r\n-        explosionParticles.Play();\r\n-        explosionAudio.Play();\r\n-\r\n-         Destroy(gameObject);\r\n-\r\n-        StartCoroutine(MyCoroutine(2f));\r\n         Debug.Log(\"Player has died!\");\r\n-        SceneManager.LoadScene(\"GameOver\");\r\n-\r\n+        SceneManager.LoadScene(2);\r\n     }\r\n-\r\n-    IEnumerator MyCoroutine(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\r\n-\r\n-    }\r\n }\r\n"
                },
                {
                    "date": 1703933046053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,12 @@\n     public int maxHealth = 10;\r\n     private int currentHealth;\r\n     public Slider healthSlider; // Reference to the health slider (if you have one)\r\n \r\n+    public GameObject explosionPrefab;\r\n+    private AudioSource explosionAudio;\r\n+    private ParticleSystem explosionParticles;\r\n+\r\n     void Start()\r\n     {\r\n         currentHealth = maxHealth;\r\n \r\n@@ -18,8 +22,12 @@\n         {\r\n             healthSlider.maxValue = maxHealth;\r\n             healthSlider.value = currentHealth;\r\n         }\r\n+\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        explosionParticles.gameObject.SetActive(false);\r\n     }\r\n \r\n     public void TakeDamage(int damage)\r\n     {\r\n@@ -39,8 +47,26 @@\n \r\n     void Die()\r\n     {\r\n         // Add any game over logic here (e.g., restart the level, show game over screen)\r\n+        \r\n+\r\n+        explosionParticles.transform.position = transform.position;\r\n+        explosionParticles.gameObject.SetActive(true);\r\n+        explosionParticles.Play();\r\n+        explosionAudio.Play();\r\n+\r\n+         Destroy(gameObject);\r\n+\r\n+        StartCoroutine(MyCoroutine(2f));\r\n         Debug.Log(\"Player has died!\");\r\n-        SceneManager.LoadScene(2);\r\n+        SceneManager.LoadScene(\"GameOver\");\r\n+\r\n     }\r\n+\r\n+    IEnumerator MyCoroutine(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\r\n+\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1703933084130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+using System.Collections;\r\n+using UnityEngine;\r\n+using UnityEngine.SceneManagement;\r\n+using UnityEngine.UI;\r\n+\r\n+public class PlayerHealth : MonoBehaviour\r\n+{\r\n+    public int maxHealth = 10;\r\n+    private int currentHealth;\r\n+    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n+\r\n+    public GameObject explosionPrefab;\r\n+    private AudioSource explosionAudio;\r\n+    private ParticleSystem explosionParticles;\r\n+\r\n+    void Start()\r\n+    {\r\n+        currentHealth = maxHealth;\r\n+\r\n+        // Set the initial health value on the slider\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.maxValue = maxHealth;\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        explosionParticles.gameObject.SetActive(false);\r\n+    }\r\n+\r\n+    public void TakeDamage(int damage)\r\n+    {\r\n+        currentHealth -= damage;\r\n+\r\n+        // Update the health slider (if you have one)\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        if (currentHealth <= 0)\r\n+        {\r\n+            Die();\r\n+        }\r\n+    }\r\n+\r\n+    void Die()\r\n+    {\r\n+        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n+        \r\n+\r\n+        explosionParticles.transform.position = transform.position;\r\n+        explosionParticles.gameObject.SetActive(true);\r\n+        explosionParticles.Play();\r\n+        explosionAudio.Play();\r\n+\r\n+         Destroy(gameObject);\r\n+\r\n+        StartCoroutine(MyCoroutine(2f));\r\n+        Debug.Log(\"Player has died!\");\r\n+        SceneManager.LoadScene(\"GameOver\");\r\n+\r\n+    }\r\n+\r\n+    IEnumerator MyCoroutine(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\r\n+\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1703933090437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+using System.Collections;\r\n+using UnityEngine;\r\n+using UnityEngine.SceneManagement;\r\n+using UnityEngine.UI;\r\n+\r\n+public class PlayerHealth : MonoBehaviour\r\n+{\r\n+    public int maxHealth = 10;\r\n+    private int currentHealth;\r\n+    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n+\r\n+    public GameObject explosionPrefab;\r\n+    private AudioSource explosionAudio;\r\n+    private ParticleSystem explosionParticles;\r\n+\r\n+    void Start()\r\n+    {\r\n+        currentHealth = maxHealth;\r\n+\r\n+        // Set the initial health value on the slider\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.maxValue = maxHealth;\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        explosionParticles.gameObject.SetActive(false);\r\n+    }\r\n+\r\n+    public void TakeDamage(int damage)\r\n+    {\r\n+        currentHealth -= damage;\r\n+\r\n+        // Update the health slider (if you have one)\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        if (currentHealth <= 0)\r\n+        {\r\n+            Die();\r\n+        }\r\n+    }\r\n+\r\n+    void Die()\r\n+    {\r\n+        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n+        \r\n+\r\n+        explosionParticles.transform.position = transform.position;\r\n+        explosionParticles.gameObject.SetActive(true);\r\n+        explosionParticles.Play();\r\n+        explosionAudio.Play();\r\n+\r\n+         \r\n+\r\n+        StartCoroutine(MyCoroutine(2f));\r\n+        Debug.Log(\"Player has died!\");\r\n+        SceneManager.LoadScene(\"GameOver\");\r\n+\r\n+    }\r\n+\r\n+    IEnumerator MyCoroutine(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\r\n+\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1703933182514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,13 +54,11 @@\n         explosionParticles.gameObject.SetActive(true);\r\n         explosionParticles.Play();\r\n         explosionAudio.Play();\r\n \r\n-         \r\n-\r\n         StartCoroutine(MyCoroutine(2f));\r\n         Debug.Log(\"Player has died!\");\r\n-        SceneManager.LoadScene(\"GameOver\");\r\n+        SceneManager.LoadScene(\"Game\");\r\n \r\n     }\r\n \r\n     IEnumerator MyCoroutine(float delay)\r\n"
                },
                {
                    "date": 1703933248227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,8 @@\n     public int maxHealth = 10;\r\n     private int currentHealth;\r\n     public Slider healthSlider; // Reference to the health slider (if you have one)\r\n \r\n-    public GameObject explosionPrefab;\r\n-    private AudioSource explosionAudio;\r\n-    private ParticleSystem explosionParticles;\r\n-\r\n     void Start()\r\n     {\r\n         currentHealth = maxHealth;\r\n \r\n@@ -22,12 +18,8 @@\n         {\r\n             healthSlider.maxValue = maxHealth;\r\n             healthSlider.value = currentHealth;\r\n         }\r\n-\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-        explosionParticles.gameObject.SetActive(false);\r\n     }\r\n \r\n     public void TakeDamage(int damage)\r\n     {\r\n@@ -46,169 +38,8 @@\n     }\r\n \r\n     void Die()\r\n     {\r\n-        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n-        \r\n-\r\n-        explosionParticles.transform.position = transform.position;\r\n-        explosionParticles.gameObject.SetActive(true);\r\n-        explosionParticles.Play();\r\n-        explosionAudio.Play();\r\n-\r\n-        StartCoroutine(MyCoroutine(2f));\r\n         Debug.Log(\"Player has died!\");\r\n-        SceneManager.LoadScene(\"Game\");\r\n-\r\n+        SceneManager.LoadScene(2);\r\n     }\r\n-\r\n-    IEnumerator MyCoroutine(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\r\n-\r\n-    }\r\n }\r\n-using System.Collections;\r\n-using UnityEngine;\r\n-using UnityEngine.SceneManagement;\r\n-using UnityEngine.UI;\r\n-\r\n-public class PlayerHealth : MonoBehaviour\r\n-{\r\n-    public int maxHealth = 10;\r\n-    private int currentHealth;\r\n-    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n-\r\n-    public GameObject explosionPrefab;\r\n-    private AudioSource explosionAudio;\r\n-    private ParticleSystem explosionParticles;\r\n-\r\n-    void Start()\r\n-    {\r\n-        currentHealth = maxHealth;\r\n-\r\n-        // Set the initial health value on the slider\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.maxValue = maxHealth;\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-        explosionParticles.gameObject.SetActive(false);\r\n-    }\r\n-\r\n-    public void TakeDamage(int damage)\r\n-    {\r\n-        currentHealth -= damage;\r\n-\r\n-        // Update the health slider (if you have one)\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        if (currentHealth <= 0)\r\n-        {\r\n-            Die();\r\n-        }\r\n-    }\r\n-\r\n-    void Die()\r\n-    {\r\n-        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n-        \r\n-\r\n-        explosionParticles.transform.position = transform.position;\r\n-        explosionParticles.gameObject.SetActive(true);\r\n-        explosionParticles.Play();\r\n-        explosionAudio.Play();\r\n-\r\n-         Destroy(gameObject);\r\n-\r\n-        StartCoroutine(MyCoroutine(2f));\r\n-        Debug.Log(\"Player has died!\");\r\n-        SceneManager.LoadScene(\"GameOver\");\r\n-\r\n-    }\r\n-\r\n-    IEnumerator MyCoroutine(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\r\n-\r\n-    }\r\n-}\r\n-using System.Collections;\r\n-using UnityEngine;\r\n-using UnityEngine.SceneManagement;\r\n-using UnityEngine.UI;\r\n-\r\n-public class PlayerHealth : MonoBehaviour\r\n-{\r\n-    public int maxHealth = 10;\r\n-    private int currentHealth;\r\n-    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n-\r\n-    public GameObject explosionPrefab;\r\n-    private AudioSource explosionAudio;\r\n-    private ParticleSystem explosionParticles;\r\n-\r\n-    void Start()\r\n-    {\r\n-        currentHealth = maxHealth;\r\n-\r\n-        // Set the initial health value on the slider\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.maxValue = maxHealth;\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-        explosionParticles.gameObject.SetActive(false);\r\n-    }\r\n-\r\n-    public void TakeDamage(int damage)\r\n-    {\r\n-        currentHealth -= damage;\r\n-\r\n-        // Update the health slider (if you have one)\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        if (currentHealth <= 0)\r\n-        {\r\n-            Die();\r\n-        }\r\n-    }\r\n-\r\n-    void Die()\r\n-    {\r\n-        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n-        \r\n-\r\n-        explosionParticles.transform.position = transform.position;\r\n-        explosionParticles.gameObject.SetActive(true);\r\n-        explosionParticles.Play();\r\n-        explosionAudio.Play();\r\n-\r\n-         Destroy(gameObject);\r\n-\r\n-        StartCoroutine(MyCoroutine(2f));\r\n-        Debug.Log(\"Player has died!\");\r\n-        SceneManager.LoadScene(\"GameOver\");\r\n-\r\n-    }\r\n-\r\n-    IEnumerator MyCoroutine(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\r\n-\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1703933264974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,12 @@\n     public int maxHealth = 10;\r\n     private int currentHealth;\r\n     public Slider healthSlider; // Reference to the health slider (if you have one)\r\n \r\n+    public GameObject explosionPrefab;\r\n+    private AudioSource explosionAudio;\r\n+    private ParticleSystem explosionParticles;\r\n+\r\n     void Start()\r\n     {\r\n         currentHealth = maxHealth;\r\n \r\n@@ -38,8 +42,13 @@\n     }\r\n \r\n     void Die()\r\n     {\r\n+        explosionParticles.transform.position = transform.position;\r\n+        explosionParticles.gameObject.SetActive(true);\r\n+        explosionParticles.Play();\r\n+        explosionAudio.Play();\r\n+\r\n         Debug.Log(\"Player has died!\");\r\n         SceneManager.LoadScene(2);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1703933279469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,12 @@\n         {\r\n             healthSlider.maxValue = maxHealth;\r\n             healthSlider.value = currentHealth;\r\n         }\r\n+\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        explosionParticles.gameObject.SetActive(false);\r\n     }\r\n \r\n     public void TakeDamage(int damage)\r\n     {\r\n"
                },
                {
                    "date": 1703933423984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,13 @@\n     private int currentHealth;\r\n     public Slider healthSlider; // Reference to the health slider (if you have one)\r\n \r\n     public GameObject explosionPrefab;\r\n-    private AudioSource explosionAudio;\r\n+    //private AudioSource explosionAudio;\r\n     private ParticleSystem explosionParticles;\r\n \r\n+    private bool hasDied = false;\r\n+\r\n     void Start()\r\n     {\r\n         currentHealth = maxHealth;\r\n \r\n@@ -24,9 +26,9 @@\n             healthSlider.value = currentHealth;\r\n         }\r\n \r\n         explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        //explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n         explosionParticles.gameObject.SetActive(false);\r\n     }\r\n \r\n     public void TakeDamage(int damage)\r\n@@ -44,15 +46,62 @@\n             Die();\r\n         }\r\n     }\r\n \r\n-    void Die()\r\n+    /*void Die()\r\n     {\r\n+        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n+        Debug.Log(\"Player has died!\");\r\n+        //SceneManager.LoadScene(2);\r\n+\r\n         explosionParticles.transform.position = transform.position;\r\n         explosionParticles.gameObject.SetActive(true);\r\n         explosionParticles.Play();\r\n-        explosionAudio.Play();\r\n+        //explosionAudio.Play();\r\n \r\n+        \r\n+    \r\n+        Destroy(gameObject);\r\n+        //StartCoroutine(MyCoroutine(3f));\r\n+        StartCoroutine(DelayedGameOver(3f));\r\n+\r\n+\r\n+    }*/\r\n+\r\n+    void Die()\r\n+    {\r\n         Debug.Log(\"Player has died!\");\r\n+\r\n+        // Trigger game over logic only once\r\n+        if (!hasDied)\r\n+        {\r\n+            hasDied = true;\r\n+\r\n+            // Play explosion effect\r\n+            explosionParticles.transform.position = transform.position;\r\n+            explosionParticles.gameObject.SetActive(true);\r\n+            explosionParticles.Play();\r\n+\r\n+            // Wait for a delay before loading the game over scene\r\n+            StartCoroutine(DelayedGameOver(1f));\r\n+            //StartCoroutine(DelayedDestroy(3f));\r\n+        }\r\n+    }\r\n+\r\n+    IEnumerator DelayedDestroy(float delay)\r\n+    {\r\n+        \r\n+        yield return new WaitForSeconds(delay);\r\n+        Destroy(gameObject);\r\n+        StartCoroutine(DelayedGameOver(1f));\r\n+    \r\n+    }\r\n+\r\n+    IEnumerator DelayedGameOver(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n         SceneManager.LoadScene(2);\r\n+\r\n+        Destroy(gameObject);\r\n+        \r\n     }\r\n }\r\n"
                },
                {
                    "date": 1703933439868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,107 @@\n+using System.Collections;\r\n+using UnityEngine;\r\n+using UnityEngine.SceneManagement;\r\n+using UnityEngine.UI;\r\n+\r\n+public class PlayerHealth : MonoBehaviour\r\n+{\r\n+    public int maxHealth = 10;\r\n+    private int currentHealth;\r\n+    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n+\r\n+    public GameObject explosionPrefab;\r\n+    //private AudioSource explosionAudio;\r\n+    private ParticleSystem explosionParticles;\r\n+\r\n+    private bool hasDied = false;\r\n+\r\n+    void Start()\r\n+    {\r\n+        currentHealth = maxHealth;\r\n+\r\n+        // Set the initial health value on the slider\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.maxValue = maxHealth;\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+        //explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        explosionParticles.gameObject.SetActive(false);\r\n+    }\r\n+\r\n+    public void TakeDamage(int damage)\r\n+    {\r\n+        currentHealth -= damage;\r\n+\r\n+        // Update the health slider (if you have one)\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        if (currentHealth <= 0)\r\n+        {\r\n+            Die();\r\n+        }\r\n+    }\r\n+\r\n+    /*void Die()\r\n+    {\r\n+        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n+        Debug.Log(\"Player has died!\");\r\n+        //SceneManager.LoadScene(2);\r\n+\r\n+        explosionParticles.transform.position = transform.position;\r\n+        explosionParticles.gameObject.SetActive(true);\r\n+        explosionParticles.Play();\r\n+        //explosionAudio.Play();\r\n+\r\n+        \r\n+    \r\n+        Destroy(gameObject);\r\n+        //StartCoroutine(MyCoroutine(3f));\r\n+        StartCoroutine(DelayedGameOver(3f));\r\n+\r\n+\r\n+    }*/\r\n+\r\n+    void Die()\r\n+    {\r\n+        Debug.Log(\"Player has died!\");\r\n+\r\n+        // Trigger game over logic only once\r\n+        if (!hasDied)\r\n+        {\r\n+            hasDied = true;\r\n+\r\n+            // Play explosion effect\r\n+            explosionParticles.transform.position = transform.position;\r\n+            explosionParticles.gameObject.SetActive(true);\r\n+            explosionParticles.Play();\r\n+\r\n+            // Wait for a delay before loading the game over scene\r\n+            StartCoroutine(DelayedGameOver(1f));\r\n+            //StartCoroutine(DelayedDestroy(3f));\r\n+        }\r\n+    }\r\n+\r\n+    IEnumerator DelayedDestroy(float delay)\r\n+    {\r\n+        \r\n+        yield return new WaitForSeconds(delay);\r\n+        Destroy(gameObject);\r\n+        StartCoroutine(DelayedGameOver(1f));\r\n+    \r\n+    }\r\n+\r\n+    IEnumerator DelayedGameOver(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+        SceneManager.LoadScene(2);\r\n+\r\n+        Destroy(gameObject);\r\n+        \r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1703933483032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n             explosionParticles.Play();\r\n \r\n             // Wait for a delay before loading the game over scene\r\n             StartCoroutine(DelayedGameOver(1f));\r\n-            //StartCoroutine(DelayedDestroy(3f));\r\n+            //StartCoroutine(DelayedDestroy(2f));\r\n         }\r\n     }\r\n \r\n     IEnumerator DelayedDestroy(float delay)\r\n@@ -104,111 +104,4 @@\n         Destroy(gameObject);\r\n         \r\n     }\r\n }\r\n-using System.Collections;\r\n-using UnityEngine;\r\n-using UnityEngine.SceneManagement;\r\n-using UnityEngine.UI;\r\n-\r\n-public class PlayerHealth : MonoBehaviour\r\n-{\r\n-    public int maxHealth = 10;\r\n-    private int currentHealth;\r\n-    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n-\r\n-    public GameObject explosionPrefab;\r\n-    //private AudioSource explosionAudio;\r\n-    private ParticleSystem explosionParticles;\r\n-\r\n-    private bool hasDied = false;\r\n-\r\n-    void Start()\r\n-    {\r\n-        currentHealth = maxHealth;\r\n-\r\n-        // Set the initial health value on the slider\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.maxValue = maxHealth;\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        //explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-        explosionParticles.gameObject.SetActive(false);\r\n-    }\r\n-\r\n-    public void TakeDamage(int damage)\r\n-    {\r\n-        currentHealth -= damage;\r\n-\r\n-        // Update the health slider (if you have one)\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        if (currentHealth <= 0)\r\n-        {\r\n-            Die();\r\n-        }\r\n-    }\r\n-\r\n-    /*void Die()\r\n-    {\r\n-        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n-        Debug.Log(\"Player has died!\");\r\n-        //SceneManager.LoadScene(2);\r\n-\r\n-        explosionParticles.transform.position = transform.position;\r\n-        explosionParticles.gameObject.SetActive(true);\r\n-        explosionParticles.Play();\r\n-        //explosionAudio.Play();\r\n-\r\n-        \r\n-    \r\n-        Destroy(gameObject);\r\n-        //StartCoroutine(MyCoroutine(3f));\r\n-        StartCoroutine(DelayedGameOver(3f));\r\n-\r\n-\r\n-    }*/\r\n-\r\n-    void Die()\r\n-    {\r\n-        Debug.Log(\"Player has died!\");\r\n-\r\n-        // Trigger game over logic only once\r\n-        if (!hasDied)\r\n-        {\r\n-            hasDied = true;\r\n-\r\n-            // Play explosion effect\r\n-            explosionParticles.transform.position = transform.position;\r\n-            explosionParticles.gameObject.SetActive(true);\r\n-            explosionParticles.Play();\r\n-\r\n-            // Wait for a delay before loading the game over scene\r\n-            StartCoroutine(DelayedGameOver(1f));\r\n-            //StartCoroutine(DelayedDestroy(3f));\r\n-        }\r\n-    }\r\n-\r\n-    IEnumerator DelayedDestroy(float delay)\r\n-    {\r\n-        \r\n-        yield return new WaitForSeconds(delay);\r\n-        Destroy(gameObject);\r\n-        StartCoroutine(DelayedGameOver(1f));\r\n-    \r\n-    }\r\n-\r\n-    IEnumerator DelayedGameOver(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-        SceneManager.LoadScene(2);\r\n-\r\n-        Destroy(gameObject);\r\n-        \r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1703933494841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,28 +46,8 @@\n             Die();\r\n         }\r\n     }\r\n \r\n-    /*void Die()\r\n-    {\r\n-        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n-        Debug.Log(\"Player has died!\");\r\n-        //SceneManager.LoadScene(2);\r\n-\r\n-        explosionParticles.transform.position = transform.position;\r\n-        explosionParticles.gameObject.SetActive(true);\r\n-        explosionParticles.Play();\r\n-        //explosionAudio.Play();\r\n-\r\n-        \r\n-    \r\n-        Destroy(gameObject);\r\n-        //StartCoroutine(MyCoroutine(3f));\r\n-        StartCoroutine(DelayedGameOver(3f));\r\n-\r\n-\r\n-    }*/\r\n-\r\n     void Die()\r\n     {\r\n         Debug.Log(\"Player has died!\");\r\n \r\n"
                },
                {
                    "date": 1703933541095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n             explosionParticles.Play();\r\n \r\n             // Wait for a delay before loading the game over scene\r\n             StartCoroutine(DelayedGameOver(1f));\r\n-            //StartCoroutine(DelayedDestroy(2f));\r\n+            //StartCoroutine(DelayedDestroy(1f));\r\n         }\r\n     }\r\n \r\n     IEnumerator DelayedDestroy(float delay)\r\n"
                },
                {
                    "date": 1703933613611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     private int currentHealth;\r\n     public Slider healthSlider; // Reference to the health slider (if you have one)\r\n \r\n     public GameObject explosionPrefab;\r\n-    //private AudioSource explosionAudio;\r\n+    private AudioSource explosionAudio;\r\n     private ParticleSystem explosionParticles;\r\n \r\n     private bool hasDied = false;\r\n \r\n"
                },
                {
                    "date": 1703933632587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n             healthSlider.value = currentHealth;\r\n         }\r\n \r\n         explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        //explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n         explosionParticles.gameObject.SetActive(false);\r\n     }\r\n \r\n     public void TakeDamage(int damage)\r\n"
                },
                {
                    "date": 1703933638924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,8 @@\n             explosionParticles.Play();\r\n \r\n             // Wait for a delay before loading the game over scene\r\n             StartCoroutine(DelayedGameOver(1f));\r\n-            //StartCoroutine(DelayedDestroy(1f));\r\n         }\r\n     }\r\n \r\n     IEnumerator DelayedDestroy(float delay)\r\n"
                },
                {
                    "date": 1703933922321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     {\r\n         \r\n         yield return new WaitForSeconds(delay);\r\n         Destroy(gameObject);\r\n-        StartCoroutine(DelayedGameOver(1f));\r\n+        StartCoroutine(DelayedGameOver(0.5f));\r\n     \r\n     }\r\n \r\n     IEnumerator DelayedGameOver(float delay)\r\n"
                },
                {
                    "date": 1703933940491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n             explosionParticles.gameObject.SetActive(true);\r\n             explosionParticles.Play();\r\n \r\n             // Wait for a delay before loading the game over scene\r\n-            StartCoroutine(DelayedGameOver(1f));\r\n+            StartCoroutine(DelayedGameOver(0.5f));\r\n         }\r\n     }\r\n \r\n     IEnumerator DelayedDestroy(float delay)\r\n"
                },
                {
                    "date": 1703933946046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n             explosionParticles.gameObject.SetActive(true);\r\n             explosionParticles.Play();\r\n \r\n             // Wait for a delay before loading the game over scene\r\n-            StartCoroutine(DelayedGameOver(0.5f));\r\n+            //StartCoroutine(DelayedGameOver(0.5f));\r\n         }\r\n     }\r\n \r\n     IEnumerator DelayedDestroy(float delay)\r\n"
                },
                {
                    "date": 1703934060969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n             explosionParticles.gameObject.SetActive(true);\r\n             explosionParticles.Play();\r\n \r\n             // Wait for a delay before loading the game over scene\r\n-            //StartCoroutine(DelayedGameOver(0.5f));\r\n+            StartCoroutine(DelayedGameOver(0.5f));\r\n         }\r\n     }\r\n \r\n     IEnumerator DelayedDestroy(float delay)\r\n"
                },
                {
                    "date": 1703934100607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,18 +61,18 @@\n             explosionParticles.gameObject.SetActive(true);\r\n             explosionParticles.Play();\r\n \r\n             // Wait for a delay before loading the game over scene\r\n-            StartCoroutine(DelayedGameOver(0.5f));\r\n+            StartCoroutine(DelayedGameOver(0.2f));\r\n         }\r\n     }\r\n \r\n     IEnumerator DelayedDestroy(float delay)\r\n     {\r\n         \r\n         yield return new WaitForSeconds(delay);\r\n         Destroy(gameObject);\r\n-        StartCoroutine(DelayedGameOver(0.5f));\r\n+        //StartCoroutine(DelayedGameOver(0.5f));\r\n     \r\n     }\r\n \r\n     IEnumerator DelayedGameOver(float delay)\r\n"
                },
                {
                    "date": 1703934134611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,8 @@\n     {\r\n         \r\n         yield return new WaitForSeconds(delay);\r\n         Destroy(gameObject);\r\n-        //StartCoroutine(DelayedGameOver(0.5f));\r\n     \r\n     }\r\n \r\n     IEnumerator DelayedGameOver(float delay)\r\n"
                },
                {
                    "date": 1703936387282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,13 +9,23 @@\n     private int currentHealth;\r\n     public Slider healthSlider; // Reference to the health slider (if you have one)\r\n \r\n     public GameObject explosionPrefab;\r\n-    private AudioSource explosionAudio;\r\n-    private ParticleSystem explosionParticles;\r\n+    public AudioSource explosionAudio;\r\n+    public ParticleSystem explosionParticles;\r\n \r\n     private bool hasDied = false;\r\n \r\n+    void Awake()\r\n+    {\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+\r\n+        explosionParticles.gameObject.SetActive(false);\r\n+\r\n+    }\r\n+    \r\n     void Start()\r\n     {\r\n         currentHealth = maxHealth;\r\n \r\n@@ -24,12 +34,8 @@\n         {\r\n             healthSlider.maxValue = maxHealth;\r\n             healthSlider.value = currentHealth;\r\n         }\r\n-\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-        explosionParticles.gameObject.SetActive(false);\r\n     }\r\n \r\n     public void TakeDamage(int damage)\r\n     {\r\n@@ -59,8 +65,9 @@\n             // Play explosion effect\r\n             explosionParticles.transform.position = transform.position;\r\n             explosionParticles.gameObject.SetActive(true);\r\n             explosionParticles.Play();\r\n+            explosionAudio.Play();\r\n \r\n             // Wait for a delay before loading the game over scene\r\n             StartCoroutine(DelayedGameOver(0.2f));\r\n         }\r\n@@ -81,5 +88,5 @@\n \r\n         Destroy(gameObject);\r\n         \r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1703936393915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+using System.Collections;\r\n+using UnityEngine;\r\n+using UnityEngine.SceneManagement;\r\n+using UnityEngine.UI;\r\n+\r\n+public class PlayerHealth : MonoBehaviour\r\n+{\r\n+    public int maxHealth = 10;\r\n+    private int currentHealth;\r\n+    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n+\r\n+    public GameObject explosionPrefab;\r\n+    public AudioSource explosionAudio;\r\n+    public ParticleSystem explosionParticles;\r\n+\r\n+    private bool hasDied = false;\r\n+\r\n+    void Awake()\r\n+    {\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+\r\n+        explosionParticles.gameObject.SetActive(false);\r\n+\r\n+    }\r\n+    \r\n+    void Start()\r\n+    {\r\n+        currentHealth = maxHealth;\r\n+\r\n+        // Set the initial health value on the slider\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.maxValue = maxHealth;\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+    }\r\n+\r\n+    public void TakeDamage(int damage)\r\n+    {\r\n+        currentHealth -= damage;\r\n+\r\n+        // Update the health slider (if you have one)\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        if (currentHealth <= 0)\r\n+        {\r\n+            Die();\r\n+        }\r\n+    }\r\n+\r\n+    void Die()\r\n+    {\r\n+        Debug.Log(\"Player has died!\");\r\n+\r\n+        // Trigger game over logic only once\r\n+        if (!hasDied)\r\n+        {\r\n+            hasDied = true;\r\n+\r\n+            // Play explosion effect\r\n+            explosionParticles.transform.position = transform.position;\r\n+            explosionParticles.gameObject.SetActive(true);\r\n+            explosionParticles.Play();\r\n+            explosionAudio.Play();\r\n+\r\n+            // Wait for a delay before loading the game over scene\r\n+            StartCoroutine(DelayedGameOver(0.2f));\r\n+        }\r\n+    }\r\n+\r\n+    IEnumerator DelayedDestroy(float delay)\r\n+    {\r\n+        \r\n+        yield return new WaitForSeconds(delay);\r\n+        Destroy(gameObject);\r\n+    \r\n+    }\r\n+\r\n+    IEnumerator DelayedGameOver(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+        SceneManager.LoadScene(2);\r\n+\r\n+        Destroy(gameObject);\r\n+        \r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1703936524192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n             explosionParticles.Play();\r\n             explosionAudio.Play();\r\n \r\n             // Wait for a delay before loading the game over scene\r\n-            StartCoroutine(DelayedGameOver(0.2f));\r\n+            StartCoroutine(DelayedGameOver(1f));\r\n         }\r\n     }\r\n \r\n     IEnumerator DelayedDestroy(float delay)\r\n"
                },
                {
                    "date": 1703936537773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+using System.Collections;\r\n+using UnityEngine;\r\n+using UnityEngine.SceneManagement;\r\n+using UnityEngine.UI;\r\n+\r\n+public class PlayerHealth : MonoBehaviour\r\n+{\r\n+    public int maxHealth = 10;\r\n+    private int currentHealth;\r\n+    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n+\r\n+    public GameObject explosionPrefab;\r\n+    public AudioSource explosionAudio;\r\n+    public ParticleSystem explosionParticles;\r\n+\r\n+    private bool hasDied = false;\r\n+\r\n+    void Awake()\r\n+    {\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+\r\n+        explosionParticles.gameObject.SetActive(false);\r\n+\r\n+    }\r\n+    \r\n+    void Start()\r\n+    {\r\n+        currentHealth = maxHealth;\r\n+\r\n+        // Set the initial health value on the slider\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.maxValue = maxHealth;\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+    }\r\n+\r\n+    public void TakeDamage(int damage)\r\n+    {\r\n+        currentHealth -= damage;\r\n+\r\n+        // Update the health slider (if you have one)\r\n+        if (healthSlider != null)\r\n+        {\r\n+            healthSlider.value = currentHealth;\r\n+        }\r\n+\r\n+        if (currentHealth <= 0)\r\n+        {\r\n+            Die();\r\n+        }\r\n+    }\r\n+\r\n+    void Die()\r\n+    {\r\n+        Debug.Log(\"Player has died!\");\r\n+\r\n+        // Trigger game over logic only once\r\n+        if (!hasDied)\r\n+        {\r\n+            hasDied = true;\r\n+\r\n+            // Play explosion effect\r\n+            explosionParticles.transform.position = transform.position;\r\n+            explosionParticles.gameObject.SetActive(true);\r\n+            explosionParticles.Play();\r\n+            explosionAudio.Play();\r\n+\r\n+            // Wait for a delay before loading the game over scene\r\n+            StartCoroutine(DelayedGameOver(2f));\r\n+        }\r\n+    }\r\n+\r\n+    IEnumerator DelayedDestroy(float delay)\r\n+    {\r\n+        \r\n+        yield return new WaitForSeconds(delay);\r\n+        Destroy(gameObject);\r\n+    \r\n+    }\r\n+\r\n+    IEnumerator DelayedGameOver(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+        SceneManager.LoadScene(2);\r\n+\r\n+        Destroy(gameObject);\r\n+        \r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1703942226095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n             explosionParticles.Play();\r\n             explosionAudio.Play();\r\n \r\n             // Wait for a delay before loading the game over scene\r\n-            StartCoroutine(DelayedGameOver(2f));\r\n+            StartCoroutine(DelayedGameOver(0.25f));\r\n         }\r\n     }\r\n \r\n     IEnumerator DelayedDestroy(float delay)\r\n@@ -88,189 +88,5 @@\n \r\n         Destroy(gameObject);\r\n         \r\n     }\r\n-}\n-using System.Collections;\r\n-using UnityEngine;\r\n-using UnityEngine.SceneManagement;\r\n-using UnityEngine.UI;\r\n-\r\n-public class PlayerHealth : MonoBehaviour\r\n-{\r\n-    public int maxHealth = 10;\r\n-    private int currentHealth;\r\n-    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n-\r\n-    public GameObject explosionPrefab;\r\n-    public AudioSource explosionAudio;\r\n-    public ParticleSystem explosionParticles;\r\n-\r\n-    private bool hasDied = false;\r\n-\r\n-    void Awake()\r\n-    {\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-\r\n-        explosionParticles.gameObject.SetActive(false);\r\n-\r\n-    }\r\n-    \r\n-    void Start()\r\n-    {\r\n-        currentHealth = maxHealth;\r\n-\r\n-        // Set the initial health value on the slider\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.maxValue = maxHealth;\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-    }\r\n-\r\n-    public void TakeDamage(int damage)\r\n-    {\r\n-        currentHealth -= damage;\r\n-\r\n-        // Update the health slider (if you have one)\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        if (currentHealth <= 0)\r\n-        {\r\n-            Die();\r\n-        }\r\n-    }\r\n-\r\n-    void Die()\r\n-    {\r\n-        Debug.Log(\"Player has died!\");\r\n-\r\n-        // Trigger game over logic only once\r\n-        if (!hasDied)\r\n-        {\r\n-            hasDied = true;\r\n-\r\n-            // Play explosion effect\r\n-            explosionParticles.transform.position = transform.position;\r\n-            explosionParticles.gameObject.SetActive(true);\r\n-            explosionParticles.Play();\r\n-            explosionAudio.Play();\r\n-\r\n-            // Wait for a delay before loading the game over scene\r\n-            StartCoroutine(DelayedGameOver(1f));\r\n-        }\r\n-    }\r\n-\r\n-    IEnumerator DelayedDestroy(float delay)\r\n-    {\r\n-        \r\n-        yield return new WaitForSeconds(delay);\r\n-        Destroy(gameObject);\r\n-    \r\n-    }\r\n-\r\n-    IEnumerator DelayedGameOver(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-        SceneManager.LoadScene(2);\r\n-\r\n-        Destroy(gameObject);\r\n-        \r\n-    }\r\n-}\n-using System.Collections;\r\n-using UnityEngine;\r\n-using UnityEngine.SceneManagement;\r\n-using UnityEngine.UI;\r\n-\r\n-public class PlayerHealth : MonoBehaviour\r\n-{\r\n-    public int maxHealth = 10;\r\n-    private int currentHealth;\r\n-    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n-\r\n-    public GameObject explosionPrefab;\r\n-    public AudioSource explosionAudio;\r\n-    public ParticleSystem explosionParticles;\r\n-\r\n-    private bool hasDied = false;\r\n-\r\n-    void Awake()\r\n-    {\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-\r\n-        explosionParticles.gameObject.SetActive(false);\r\n-\r\n-    }\r\n-    \r\n-    void Start()\r\n-    {\r\n-        currentHealth = maxHealth;\r\n-\r\n-        // Set the initial health value on the slider\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.maxValue = maxHealth;\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-    }\r\n-\r\n-    public void TakeDamage(int damage)\r\n-    {\r\n-        currentHealth -= damage;\r\n-\r\n-        // Update the health slider (if you have one)\r\n-        if (healthSlider != null)\r\n-        {\r\n-            healthSlider.value = currentHealth;\r\n-        }\r\n-\r\n-        if (currentHealth <= 0)\r\n-        {\r\n-            Die();\r\n-        }\r\n-    }\r\n-\r\n-    void Die()\r\n-    {\r\n-        Debug.Log(\"Player has died!\");\r\n-\r\n-        // Trigger game over logic only once\r\n-        if (!hasDied)\r\n-        {\r\n-            hasDied = true;\r\n-\r\n-            // Play explosion effect\r\n-            explosionParticles.transform.position = transform.position;\r\n-            explosionParticles.gameObject.SetActive(true);\r\n-            explosionParticles.Play();\r\n-            explosionAudio.Play();\r\n-\r\n-            // Wait for a delay before loading the game over scene\r\n-            StartCoroutine(DelayedGameOver(0.2f));\r\n-        }\r\n-    }\r\n-\r\n-    IEnumerator DelayedDestroy(float delay)\r\n-    {\r\n-        \r\n-        yield return new WaitForSeconds(delay);\r\n-        Destroy(gameObject);\r\n-    \r\n-    }\r\n-\r\n-    IEnumerator DelayedGameOver(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-        SceneManager.LoadScene(2);\r\n-\r\n-        Destroy(gameObject);\r\n-        \r\n-    }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1703772306470,
            "name": "Commit-0",
            "content": "using System.Collections;\r\nusing UnityEngine;\r\nusing UnityEngine.SceneManagement;\r\nusing UnityEngine.UI;\r\n\r\npublic class PlayerHealth : MonoBehaviour\r\n{\r\n    public int maxHealth = 10;\r\n    private int currentHealth;\r\n    public Slider healthSlider; // Reference to the health slider (if you have one)\r\n\r\n    public GameObject explosionPrefab;\r\n    private AudioSource explosionAudio;\r\n    private ParticleSystem explosionParticles;\r\n\r\n    void Start()\r\n    {\r\n        currentHealth = maxHealth;\r\n\r\n        // Set the initial health value on the slider\r\n        if (healthSlider != null)\r\n        {\r\n            healthSlider.maxValue = maxHealth;\r\n            healthSlider.value = currentHealth;\r\n        }\r\n\r\n        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n        explosionParticles.gameObject.SetActive(false);\r\n    }\r\n\r\n    public void TakeDamage(int damage)\r\n    {\r\n        currentHealth -= damage;\r\n\r\n        // Update the health slider (if you have one)\r\n        if (healthSlider != null)\r\n        {\r\n            healthSlider.value = currentHealth;\r\n        }\r\n\r\n        if (currentHealth <= 0)\r\n        {\r\n            Die();\r\n        }\r\n    }\r\n\r\n    void Die()\r\n    {\r\n        // Add any game over logic here (e.g., restart the level, show game over screen)\r\n        Debug.Log(\"Player has died!\");\r\n        SceneManager.LoadScene(2);\r\n\r\n        explosionParticles.transform.position = transform.position;\r\n        explosionParticles.gameObject.SetActive(true);\r\n        explosionParticles.Play();\r\n        explosionAudio.Play();\r\n\r\n        StartCoroutine(MyCoroutine(3f));\r\n\r\n    }\r\n\r\n    IEnumerator MyCoroutine(float delay)\r\n    {\r\n        yield return new WaitForSeconds(delay);\r\n        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\r\n\r\n    }\r\n}\r\n"
        }
    ]
}