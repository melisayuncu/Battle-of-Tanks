{
    "sourceFile": "Assets/Scripts/EnemyTankShooter.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1703764930711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1703765005738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n             if (player != null)\r\n             {\r\n                 // Calculate direction to the player\r\n-                Vector3 directionToPlayer = (player.position - transform.position).normalized;\r\n+                Vector3 spawnPosition = transform.position + new Vector3(0f, bulletSpawnYOffset, 0f);\r\n \r\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n"
                },
                {
                    "date": 1703765018366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n             if (player != null)\r\n             {\r\n                 // Calculate direction to the player\r\n-                Vector3 spawnPosition = transform.position + new Vector3(0f, bulletSpawnYOffset, 0f);\r\n+                Vector3 directionToPlayer = transform.position + new Vector3(0f, bulletSpawnYOffset, 0f);;\r\n \r\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n"
                },
                {
                    "date": 1703765067091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n             if (player != null)\r\n             {\r\n                 // Calculate direction to the player\r\n-                Vector3 directionToPlayer = transform.position + new Vector3(0f, bulletSpawnYOffset, 0f);;\r\n+                Vector3 directionToPlayer = (player.position - transform.position).normalized;\r\n \r\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n"
                },
                {
                    "date": 1703765101479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n             if (player != null)\r\n             {\r\n                 // Calculate direction to the player\r\n-                Vector3 directionToPlayer = (player.position - transform.position).normalized;\r\n+                Vector3 directionToPlayer = (player.position - transform.position).normalized+bulletSpawnYOffset;\r\n \r\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n"
                },
                {
                    "date": 1703765108633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n             if (player != null)\r\n             {\r\n                 // Calculate direction to the player\r\n-                Vector3 directionToPlayer = (player.position - transform.position).normalized+bulletSpawnYOffset;\r\n+                Vector3 directionToPlayer = (player.position - transform.position+bulletSpawnYOffset).normalized+;\r\n \r\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n"
                },
                {
                    "date": 1703765119578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n             if (player != null)\r\n             {\r\n                 // Calculate direction to the player\r\n-                Vector3 directionToPlayer = (player.position - transform.position+bulletSpawnYOffset).normalized+;\r\n+                Vector3 directionToPlayer = (player.position - transform.position+).normalized+;\r\n \r\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n"
                },
                {
                    "date": 1703765126834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+using System.Collections;\r\n+using UnityEngine;\r\n+using UnityEngine.AI;\r\n+\r\n+public class EnemyTankShooter : MonoBehaviour\r\n+{\r\n+    public GameObject bulletPrefab;\r\n+    public float bulletForce = 20.0f;\r\n+    public int damage = 1;\r\n+    public float shootInterval = 2.0f; // Adjust this value based on your game's design\r\n+\r\n+    public vector bulletSpawnYOffset = 0.5f; // offset of the bullet to spawn point NEW LINE\r\n+\r\n+    private Transform player;\r\n+    private NavMeshAgent navMeshAgent;\r\n+    void Start()\r\n+    {\r\n+        player = GameObject.FindGameObjectWithTag(\"Player\").transform;\r\n+        navMeshAgent = GetComponent<NavMeshAgent>();\r\n+\r\n+        if (navMeshAgent == null)\r\n+        {\r\n+            Debug.LogError(\"NavMeshAgent component not found on the enemy tank.\");\r\n+            enabled = false; // Disable this script to avoid further errors\r\n+        }\r\n+\r\n+        StartCoroutine(ShootAtPlayer());\r\n+    }\r\n+    //  StartFollowingPlayer();\r\n+\r\n+    void Update()\r\n+    {\r\n+        // Continuously update the destination to follow the player\r\n+        if (navMeshAgent != null && navMeshAgent.isActiveAndEnabled && navMeshAgent.isOnNavMesh)\r\n+        {\r\n+            StartFollowingPlayer();\r\n+        }\r\n+    }\r\n+    void StartFollowingPlayer()\r\n+    {\r\n+        if (player != null && navMeshAgent != null)\r\n+        {\r\n+            // Check if the destination is different to avoid recalculating the path unnecessarily\r\n+            if (navMeshAgent.destination != player.position)\r\n+            {\r\n+                navMeshAgent.SetDestination(player.position);\r\n+            }\r\n+        }\r\n+    }\r\n+    IEnumerator ShootAtPlayer()\r\n+    {\r\n+        while (true)\r\n+        {\r\n+            yield return new WaitForSeconds(shootInterval);\r\n+\r\n+            if (player != null)\r\n+            {\r\n+                // Calculate direction to the player\r\n+                Vector3 directionToPlayer = (player.position - transform.position+).normalized+;\r\n+\r\n+                // Rotate the tank to face the player (optional)\r\n+                transform.forward = directionToPlayer;\r\n+\r\n+                // Shoot a bullet in the direction of the player\r\n+                GameObject bullet = Instantiate(bulletPrefab, transform.position, transform.rotation);\r\n+                Rigidbody bulletRb = bullet.GetComponent<Rigidbody>();\r\n+                bulletRb.velocity = directionToPlayer * bulletForce;\r\n+\r\n+                // Apply damage to the player (uncomment if needed)\r\n+                // PlayerHealth playerHealth = player.GetComponent<PlayerHealth>();\r\n+                // if (playerHealth != null)\r\n+                // {\r\n+                //     playerHealth.TakeDamage(damage);\r\n+                // }\r\n+            }\r\n+        }\r\n+    }\r\n+     \r\n+}\r\n"
                },
                {
                    "date": 1703765150356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     public float bulletForce = 20.0f;\r\n     public int damage = 1;\r\n     public float shootInterval = 2.0f; // Adjust this value based on your game's design\r\n \r\n-    public vector bulletSpawnYOffset = 0.5f; // offset of the bullet to spawn point NEW LINE\r\n+    public Vector3 bulletSpawnYOffset = (0.5); // offset of the bullet to spawn point NEW LINE\r\n \r\n     private Transform player;\r\n     private NavMeshAgent navMeshAgent;\r\n     void Start()\r\n@@ -76,83 +76,4 @@\n         }\r\n     }\r\n      \r\n }\r\n-using System.Collections;\r\n-using UnityEngine;\r\n-using UnityEngine.AI;\r\n-\r\n-public class EnemyTankShooter : MonoBehaviour\r\n-{\r\n-    public GameObject bulletPrefab;\r\n-    public float bulletForce = 20.0f;\r\n-    public int damage = 1;\r\n-    public float shootInterval = 2.0f; // Adjust this value based on your game's design\r\n-\r\n-    public float bulletSpawnYOffset = 0.5f; // offset of the bullet to spawn point NEW LINE\r\n-\r\n-    private Transform player;\r\n-    private NavMeshAgent navMeshAgent;\r\n-    void Start()\r\n-    {\r\n-        player = GameObject.FindGameObjectWithTag(\"Player\").transform;\r\n-        navMeshAgent = GetComponent<NavMeshAgent>();\r\n-\r\n-        if (navMeshAgent == null)\r\n-        {\r\n-            Debug.LogError(\"NavMeshAgent component not found on the enemy tank.\");\r\n-            enabled = false; // Disable this script to avoid further errors\r\n-        }\r\n-\r\n-        StartCoroutine(ShootAtPlayer());\r\n-    }\r\n-    //  StartFollowingPlayer();\r\n-\r\n-    void Update()\r\n-    {\r\n-        // Continuously update the destination to follow the player\r\n-        if (navMeshAgent != null && navMeshAgent.isActiveAndEnabled && navMeshAgent.isOnNavMesh)\r\n-        {\r\n-            StartFollowingPlayer();\r\n-        }\r\n-    }\r\n-    void StartFollowingPlayer()\r\n-    {\r\n-        if (player != null && navMeshAgent != null)\r\n-        {\r\n-            // Check if the destination is different to avoid recalculating the path unnecessarily\r\n-            if (navMeshAgent.destination != player.position)\r\n-            {\r\n-                navMeshAgent.SetDestination(player.position);\r\n-            }\r\n-        }\r\n-    }\r\n-    IEnumerator ShootAtPlayer()\r\n-    {\r\n-        while (true)\r\n-        {\r\n-            yield return new WaitForSeconds(shootInterval);\r\n-\r\n-            if (player != null)\r\n-            {\r\n-                // Calculate direction to the player\r\n-                Vector3 directionToPlayer = (player.position - transform.position+).normalized+;\r\n-\r\n-                // Rotate the tank to face the player (optional)\r\n-                transform.forward = directionToPlayer;\r\n-\r\n-                // Shoot a bullet in the direction of the player\r\n-                GameObject bullet = Instantiate(bulletPrefab, transform.position, transform.rotation);\r\n-                Rigidbody bulletRb = bullet.GetComponent<Rigidbody>();\r\n-                bulletRb.velocity = directionToPlayer * bulletForce;\r\n-\r\n-                // Apply damage to the player (uncomment if needed)\r\n-                // PlayerHealth playerHealth = player.GetComponent<PlayerHealth>();\r\n-                // if (playerHealth != null)\r\n-                // {\r\n-                //     playerHealth.TakeDamage(damage);\r\n-                // }\r\n-            }\r\n-        }\r\n-    }\r\n-     \r\n-}\r\n"
                },
                {
                    "date": 1703765214188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     public float bulletForce = 20.0f;\r\n     public int damage = 1;\r\n     public float shootInterval = 2.0f; // Adjust this value based on your game's design\r\n \r\n-    public Vector3 bulletSpawnYOffset = (0.5); // offset of the bullet to spawn point NEW LINE\r\n+    public Vector3 bulletSpawnYOffset = (0,0,1); // offset of the bullet to spawn point NEW LINE\r\n \r\n     private Transform player;\r\n     private NavMeshAgent navMeshAgent;\r\n     void Start()\r\n"
                },
                {
                    "date": 1703765233272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     public float bulletForce = 20.0f;\r\n     public int damage = 1;\r\n     public float shootInterval = 2.0f; // Adjust this value based on your game's design\r\n \r\n-    public Vector3 bulletSpawnYOffset = (0,0,1); // offset of the bullet to spawn point NEW LINE\r\n+public Vector3 bulletSpawnYOffset = new Vector3(0, 0, 1); // offset of the bullet to spawn point NEW LINE\r\n \r\n     private Transform player;\r\n     private NavMeshAgent navMeshAgent;\r\n     void Start()\r\n"
                },
                {
                    "date": 1703765247149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n             if (player != null)\r\n             {\r\n                 // Calculate direction to the player\r\n-                Vector3 directionToPlayer = (player.position - transform.position+).normalized+;\r\n+                Vector3 directionToPlayer = (player.position - transform.position+).normalized+bulletSpawnYOffset;\r\n \r\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n"
                },
                {
                    "date": 1703765256280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,10 @@\n \r\n             if (player != null)\r\n             {\r\n                 // Calculate direction to the player\r\n-                Vector3 directionToPlayer = (player.position - transform.position+).normalized+bulletSpawnYOffset;\r\n+                Vector3 directionToPlayer = (player.position - transform.position\r\n+                ).normalized+bulletSpawnYOffset;\r\n \r\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n"
                },
                {
                    "date": 1703765263312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,10 +55,9 @@\n \r\n             if (player != null)\r\n             {\r\n                 // Calculate direction to the player\r\n-                Vector3 directionToPlayer = (player.position - transform.position\r\n-                ).normalized+bulletSpawnYOffset;\r\n+                Vector3 directionToPlayer = (player.position - transform.position).normalized+bulletSpawnYOffset;\r\n \r\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n"
                },
                {
                    "date": 1703765291795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n             if (player != null)\r\n             {\r\n                 // Calculate direction to the player\r\n-                Vector3 directionToPlayer = (player.position - transform.position).normalized+bulletSpawnYOffset;\r\n+                Vector3 directionToPlayer = (player.position - transform.position+bulletSpawnYOffset).normalized+bulletSpawnYOffset;\r\n \r\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n"
                },
                {
                    "date": 1703765296826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n             if (player != null)\r\n             {\r\n                 // Calculate direction to the player\r\n-                Vector3 directionToPlayer = (player.position - transform.position+bulletSpawnYOffset).normalized+bulletSpawnYOffset;\r\n+                Vector3 directionToPlayer = (player.position - transform.position+bulletSpawnYOffset).normalized;\r\n \r\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n"
                },
                {
                    "date": 1703765321276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n             if (player != null)\r\n             {\r\n                 // Calculate direction to the player\r\n-                Vector3 directionToPlayer = (player.position - transform.position+bulletSpawnYOffset).normalized;\r\n+                Vector3 directionToPlayer = (player.position - transform.position).normalized;\r\n \r\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n"
                },
                {
                    "date": 1703771206581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     public float bulletForce = 20.0f;\r\n     public int damage = 1;\r\n     public float shootInterval = 2.0f; // Adjust this value based on your game's design\r\n \r\n-public Vector3 bulletSpawnYOffset = new Vector3(0, 0, 1); // offset of the bullet to spawn point NEW LINE\r\n+public Vector3 bulletSpawnYOffset = new Vector3(0, 0, 0.5); // offset of the bullet to spawn point NEW LINE\r\n \r\n     private Transform player;\r\n     private NavMeshAgent navMeshAgent;\r\n     void Start()\r\n"
                },
                {
                    "date": 1703771226111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     public float bulletForce = 20.0f;\r\n     public int damage = 1;\r\n     public float shootInterval = 2.0f; // Adjust this value based on your game's design\r\n \r\n-public Vector3 bulletSpawnYOffset = new Vector3(0, 0, 0.5); // offset of the bullet to spawn point NEW LINE\r\n+public Vector3 bulletSpawnYOffset = new Vector3(0, 0, 0); // offset of the bullet to spawn point NEW LINE\r\n \r\n     private Transform player;\r\n     private NavMeshAgent navMeshAgent;\r\n     void Start()\r\n"
                },
                {
                    "date": 1703771231816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     public float bulletForce = 20.0f;\r\n     public int damage = 1;\r\n     public float shootInterval = 2.0f; // Adjust this value based on your game's design\r\n \r\n-public Vector3 bulletSpawnYOffset = new Vector3(0, 0, 0); // offset of the bullet to spawn point NEW LINE\r\n+public Vector3 bulletSpawnYOffset = new Vector3(0, 0, 1); // offset of the bullet to spawn point NEW LINE\r\n \r\n     private Transform player;\r\n     private NavMeshAgent navMeshAgent;\r\n     void Start()\r\n"
                },
                {
                    "date": 1703771439510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,79 +1,1 @@\n-using System.Collections;\r\n-using UnityEngine;\r\n-using UnityEngine.AI;\r\n-\r\n-public class EnemyTankShooter : MonoBehaviour\r\n-{\r\n-    public GameObject bulletPrefab;\r\n-    public float bulletForce = 20.0f;\r\n-    public int damage = 1;\r\n-    public float shootInterval = 2.0f; // Adjust this value based on your game's design\r\n-\r\n-public Vector3 bulletSpawnYOffset = new Vector3(0, 0, 1); // offset of the bullet to spawn point NEW LINE\r\n-\r\n-    private Transform player;\r\n-    private NavMeshAgent navMeshAgent;\r\n-    void Start()\r\n-    {\r\n-        player = GameObject.FindGameObjectWithTag(\"Player\").transform;\r\n-        navMeshAgent = GetComponent<NavMeshAgent>();\r\n-\r\n-        if (navMeshAgent == null)\r\n-        {\r\n-            Debug.LogError(\"NavMeshAgent component not found on the enemy tank.\");\r\n-            enabled = false; // Disable this script to avoid further errors\r\n-        }\r\n-\r\n-        StartCoroutine(ShootAtPlayer());\r\n-    }\r\n-    //  StartFollowingPlayer();\r\n-\r\n-    void Update()\r\n-    {\r\n-        // Continuously update the destination to follow the player\r\n-        if (navMeshAgent != null && navMeshAgent.isActiveAndEnabled && navMeshAgent.isOnNavMesh)\r\n-        {\r\n-            StartFollowingPlayer();\r\n-        }\r\n-    }\r\n-    void StartFollowingPlayer()\r\n-    {\r\n-        if (player != null && navMeshAgent != null)\r\n-        {\r\n-            // Check if the destination is different to avoid recalculating the path unnecessarily\r\n-            if (navMeshAgent.destination != player.position)\r\n-            {\r\n-                navMeshAgent.SetDestination(player.position);\r\n-            }\r\n-        }\r\n-    }\r\n-    IEnumerator ShootAtPlayer()\r\n-    {\r\n-        while (true)\r\n-        {\r\n-            yield return new WaitForSeconds(shootInterval);\r\n-\r\n-            if (player != null)\r\n-            {\r\n-                // Calculate direction to the player\r\n-                Vector3 directionToPlayer = (player.position - transform.position).normalized;\r\n-\r\n-                // Rotate the tank to face the player (optional)\r\n-                transform.forward = directionToPlayer;\r\n-\r\n-                // Shoot a bullet in the direction of the player\r\n-                GameObject bullet = Instantiate(bulletPrefab, transform.position, transform.rotation);\r\n-                Rigidbody bulletRb = bullet.GetComponent<Rigidbody>();\r\n-                bulletRb.velocity = directionToPlayer * bulletForce;\r\n-\r\n-                // Apply damage to the player (uncomment if needed)\r\n-                // PlayerHealth playerHealth = player.GetComponent<PlayerHealth>();\r\n-                // if (playerHealth != null)\r\n-                // {\r\n-                //     playerHealth.TakeDamage(damage);\r\n-                // }\r\n-            }\r\n-        }\r\n-    }\r\n-     \r\n-}\r\n+GameObject bullet = Instantiate\n\\ No newline at end of file\n"
                },
                {
                    "date": 1703771458849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,79 @@\n-GameObject bullet = Instantiate\n\\ No newline at end of file\n+using System.Collections;\r\n+using UnityEngine;\r\n+using UnityEngine.AI;\r\n+\r\n+public class EnemyTankShooter : MonoBehaviour\r\n+{\r\n+    public GameObject bulletPrefab;\r\n+    public float bulletForce = 20.0f;\r\n+    public int damage = 1;\r\n+    public float shootInterval = 2.0f; // Adjust this value based on your game's design\r\n+\r\n+public Vector3 bulletSpawnYOffset = new Vector3(0, 0, 1); // offset of the bullet to spawn point NEW LINE\r\n+\r\n+    private Transform player;\r\n+    private NavMeshAgent navMeshAgent;\r\n+    void Start()\r\n+    {\r\n+        player = GameObject.FindGameObjectWithTag(\"Player\").transform;\r\n+        navMeshAgent = GetComponent<NavMeshAgent>();\r\n+\r\n+        if (navMeshAgent == null)\r\n+        {\r\n+            Debug.LogError(\"NavMeshAgent component not found on the enemy tank.\");\r\n+            enabled = false; // Disable this script to avoid further errors\r\n+        }\r\n+\r\n+        StartCoroutine(ShootAtPlayer());\r\n+    }\r\n+    //  StartFollowingPlayer();\r\n+\r\n+    void Update()\r\n+    {\r\n+        // Continuously update the destination to follow the player\r\n+        if (navMeshAgent != null && navMeshAgent.isActiveAndEnabled && navMeshAgent.isOnNavMesh)\r\n+        {\r\n+            StartFollowingPlayer();\r\n+        }\r\n+    }\r\n+    void StartFollowingPlayer()\r\n+    {\r\n+        if (player != null && navMeshAgent != null)\r\n+        {\r\n+            // Check if the destination is different to avoid recalculating the path unnecessarily\r\n+            if (navMeshAgent.destination != player.position)\r\n+            {\r\n+                navMeshAgent.SetDestination(player.position);\r\n+            }\r\n+        }\r\n+    }\r\n+    IEnumerator ShootAtPlayer()\r\n+    {\r\n+        while (true)\r\n+        {\r\n+            yield return new WaitForSeconds(shootInterval);\r\n+\r\n+            if (player != null)\r\n+            {\r\n+                // Calculate direction to the player\r\n+                Vector3 directionToPlayer = (player.position - transform.position).normalized;\r\n+\r\n+                // Rotate the tank to face the player (optional)\r\n+                transform.forward = directionToPlayer;\r\n+\r\n+                // Shoot a bullet in the direction of the player\r\n+GameObject bullet = Instantiate(bulletPrefab, transform.position + transform.forward * bulletSpawnYOffset.z, transform.rotation);\r\n+                Rigidbody bulletRb = bullet.GetComponent<Rigidbody>();\r\n+                bulletRb.velocity = directionToPlayer * bulletForce;\r\n+\r\n+                // Apply damage to the player (uncomment if needed)\r\n+                // PlayerHealth playerHealth = player.GetComponent<PlayerHealth>();\r\n+                // if (playerHealth != null)\r\n+                // {\r\n+                //     playerHealth.TakeDamage(damage);\r\n+                // }\r\n+            }\r\n+        }\r\n+    }\r\n+     \r\n+}\r\n"
                },
                {
                    "date": 1703771464838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n                 // Shoot a bullet in the direction of the player\r\n-GameObject bullet = Instantiate(bulletPrefab, transform.position + transform.forward * bulletSpawnYOffset.z, transform.rotation);\r\n+                \r\n                 Rigidbody bulletRb = bullet.GetComponent<Rigidbody>();\r\n                 bulletRb.velocity = directionToPlayer * bulletForce;\r\n \r\n                 // Apply damage to the player (uncomment if needed)\r\n"
                },
                {
                    "date": 1703771471382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                 // Rotate the tank to face the player (optional)\r\n                 transform.forward = directionToPlayer;\r\n \r\n                 // Shoot a bullet in the direction of the player\r\n-                \r\n+                GameObject bullet = Instantiate(bulletPrefab, transform.position + transform.forward * bulletSpawnYOffset.z, transform.rotation);\r\n                 Rigidbody bulletRb = bullet.GetComponent<Rigidbody>();\r\n                 bulletRb.velocity = directionToPlayer * bulletForce;\r\n \r\n                 // Apply damage to the player (uncomment if needed)\r\n"
                }
            ],
            "date": 1703764930711,
            "name": "Commit-0",
            "content": "using System.Collections;\r\nusing UnityEngine;\r\nusing UnityEngine.AI;\r\n\r\npublic class EnemyTankShooter : MonoBehaviour\r\n{\r\n    public GameObject bulletPrefab;\r\n    public float bulletForce = 20.0f;\r\n    public int damage = 1;\r\n    public float shootInterval = 2.0f; // Adjust this value based on your game's design\r\n\r\n    public float bulletSpawnYOffset = 0.5f; // offset of the bullet to spawn point NEW LINE\r\n\r\n    private Transform player;\r\n    private NavMeshAgent navMeshAgent;\r\n    void Start()\r\n    {\r\n        player = GameObject.FindGameObjectWithTag(\"Player\").transform;\r\n        navMeshAgent = GetComponent<NavMeshAgent>();\r\n\r\n        if (navMeshAgent == null)\r\n        {\r\n            Debug.LogError(\"NavMeshAgent component not found on the enemy tank.\");\r\n            enabled = false; // Disable this script to avoid further errors\r\n        }\r\n\r\n        StartCoroutine(ShootAtPlayer());\r\n    }\r\n    //  StartFollowingPlayer();\r\n\r\n    void Update()\r\n    {\r\n        // Continuously update the destination to follow the player\r\n        if (navMeshAgent != null && navMeshAgent.isActiveAndEnabled && navMeshAgent.isOnNavMesh)\r\n        {\r\n            StartFollowingPlayer();\r\n        }\r\n    }\r\n    void StartFollowingPlayer()\r\n    {\r\n        if (player != null && navMeshAgent != null)\r\n        {\r\n            // Check if the destination is different to avoid recalculating the path unnecessarily\r\n            if (navMeshAgent.destination != player.position)\r\n            {\r\n                navMeshAgent.SetDestination(player.position);\r\n            }\r\n        }\r\n    }\r\n    IEnumerator ShootAtPlayer()\r\n    {\r\n        while (true)\r\n        {\r\n            yield return new WaitForSeconds(shootInterval);\r\n\r\n            if (player != null)\r\n            {\r\n                // Calculate direction to the player\r\n                Vector3 directionToPlayer = (player.position - transform.position).normalized;\r\n\r\n                // Rotate the tank to face the player (optional)\r\n                transform.forward = directionToPlayer;\r\n\r\n                // Shoot a bullet in the direction of the player\r\n                GameObject bullet = Instantiate(bulletPrefab, transform.position, transform.rotation);\r\n                Rigidbody bulletRb = bullet.GetComponent<Rigidbody>();\r\n                bulletRb.velocity = directionToPlayer * bulletForce;\r\n\r\n                // Apply damage to the player (uncomment if needed)\r\n                // PlayerHealth playerHealth = player.GetComponent<PlayerHealth>();\r\n                // if (playerHealth != null)\r\n                // {\r\n                //     playerHealth.TakeDamage(damage);\r\n                // }\r\n            }\r\n        }\r\n    }\r\n     \r\n}\r\n"
        }
    ]
}