{
    "sourceFile": "Assets/Scripts/EnemyManager.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 79,
            "patches": [
                {
                    "date": 1703937066728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1703937116538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n using System.Collections;\r\n-using System.Collections.Generic;\r\n using UnityEngine;\r\n \r\n public class EnemyManager : MonoBehaviour\r\n {\r\n@@ -8,29 +7,31 @@\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n+\r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n+        StartContinuousSpawn();\r\n     }\r\n \r\n-    void OnEnable()\r\n-{\r\n-    InvokeRepeating(\"SpawnNewEnemy\", 0f, 5f); // Spawn a new enemy every 5 seconds\r\n-}\r\n+    void SpawnAllEnemies()\r\n+    {\r\n+        if (m_EnemyPrefab != null)\r\n+        {\r\n+            foreach (Transform spawnPoint in m_SpawnPoints)\r\n+            {\r\n+                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+            }\r\n+        }\r\n+    }\r\n \r\n-void SpawnNewEnemy()\r\n-{\r\n-    if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n+    void StartContinuousSpawn()\r\n     {\r\n-        int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-        Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n-        currentEnemyCount++;\r\n+        InvokeRepeating(\"SpawnNewEnemy\", 0f, 5f); // Spawn a new enemy every 5 seconds\r\n     }\r\n-}\r\n \r\n-\r\n     void SpawnNewEnemy()\r\n     {\r\n         if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n@@ -39,8 +40,4 @@\n             currentEnemyCount++;\r\n         }\r\n     }\r\n }\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1703937304841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,11 @@\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n         StartContinuousSpawn();\r\n+\r\n+        // Subscribe the OnEnemyKilled method to the onEnemyKilled event\r\n+        EnemyHealth.onEnemyKilled += OnEnemyKilled;\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n@@ -21,8 +24,9 @@\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n                 Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+                currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n \r\n@@ -39,5 +43,19 @@\n             Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n+\r\n+    // This method is called when an enemy is killed\r\n+    void OnEnemyKilled()\r\n+    {\r\n+        currentEnemyCount--; // Decrease the count when an enemy is killed\r\n+\r\n+        // If the count is less than the maximum, spawn a new enemy immediately\r\n+        if (currentEnemyCount < maxEnemies)\r\n+        {\r\n+            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n+            currentEnemyCount++;\r\n+        }\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1703937529038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,9 @@\n     {\r\n         SpawnAllEnemies();\r\n         StartContinuousSpawn();\r\n \r\n-        // Subscribe the OnEnemyKilled method to the onEnemyKilled event\r\n-        EnemyHealth.onEnemyKilled += OnEnemyKilled;\r\n+        // No need to subscribe to the onEnemyKilled event in Start, as it's handled within the EnemyHealth script\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n@@ -43,19 +42,5 @@\n             Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n-\r\n-    // This method is called when an enemy is killed\r\n-    void OnEnemyKilled()\r\n-    {\r\n-        currentEnemyCount--; // Decrease the count when an enemy is killed\r\n-\r\n-        // If the count is less than the maximum, spawn a new enemy immediately\r\n-        if (currentEnemyCount < maxEnemies)\r\n-        {\r\n-            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n-            currentEnemyCount++;\r\n-        }\r\n-    }\r\n }\r\n"
                },
                {
                    "date": 1703937607066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,5 +42,19 @@\n             Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n+\r\n+    // This method is not needed anymore\r\n+    // void OnEnemyKilled()\r\n+    // {\r\n+    //     currentEnemyCount--; // Decrease the count when an enemy is killed\r\n+    //\r\n+    //     // If the count is less than the maximum, spawn a new enemy immediately\r\n+    //     if (currentEnemyCount < maxEnemies)\r\n+    //     {\r\n+    //         int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+    //         Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n+    //         currentEnemyCount++;\r\n+    //     }\r\n+    // }\r\n }\r\n"
                },
                {
                    "date": 1703937625757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,10 @@\n     {\r\n         SpawnAllEnemies();\r\n         StartContinuousSpawn();\r\n \r\n-        // No need to subscribe to the onEnemyKilled event in Start, as it's handled within the EnemyHealth script\r\n+        // Subscribe the OnEnemyKilled method to the onEnemyKilled event\r\n+        EnemyHealth.onEnemyKilled += OnEnemyKilled;\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n@@ -43,18 +44,18 @@\n             currentEnemyCount++;\r\n         }\r\n     }\r\n \r\n-    // This method is not needed anymore\r\n-    // void OnEnemyKilled()\r\n-    // {\r\n-    //     currentEnemyCount--; // Decrease the count when an enemy is killed\r\n-    //\r\n-    //     // If the count is less than the maximum, spawn a new enemy immediately\r\n-    //     if (currentEnemyCount < maxEnemies)\r\n-    //     {\r\n-    //         int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-    //         Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n-    //         currentEnemyCount++;\r\n-    //     }\r\n-    // }\r\n+    // This method is called when an enemy is killed\r\n+    void OnEnemyKilled()\r\n+    {\r\n+        currentEnemyCount--; // Decrease the count when an enemy is killed\r\n+\r\n+        // If the count is less than the maximum, spawn a new enemy immediately\r\n+        if (currentEnemyCount < maxEnemies)\r\n+        {\r\n+            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n+            currentEnemyCount++;\r\n+        }\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1703937715904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n using System.Collections;\r\n+using System.Collections.Generic;\r\n using UnityEngine;\r\n \r\n public class EnemyManager : MonoBehaviour\r\n {\r\n@@ -7,16 +8,16 @@\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n-\r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n-        StartContinuousSpawn();\r\n+    }\r\n \r\n-        // Subscribe the OnEnemyKilled method to the onEnemyKilled event\r\n-        EnemyHealth.onEnemyKilled += OnEnemyKilled;\r\n+    void OnEnable()\r\n+    {\r\n+        EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n@@ -24,18 +25,12 @@\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n                 Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n-                currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n \r\n-    void StartContinuousSpawn()\r\n-    {\r\n-        InvokeRepeating(\"SpawnNewEnemy\", 0f, 5f); // Spawn a new enemy every 5 seconds\r\n-    }\r\n-\r\n     void SpawnNewEnemy()\r\n     {\r\n         if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n@@ -43,19 +38,9 @@\n             Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n+}\r\n \r\n-    // This method is called when an enemy is killed\r\n-    void OnEnemyKilled()\r\n-    {\r\n-        currentEnemyCount--; // Decrease the count when an enemy is killed\r\n \r\n-        // If the count is less than the maximum, spawn a new enemy immediately\r\n-        if (currentEnemyCount < maxEnemies)\r\n-        {\r\n-            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n-            currentEnemyCount++;\r\n-        }\r\n-    }\r\n-}\r\n+\r\n+\r\n"
                },
                {
                    "date": 1703937861934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n public class EnemyManager : MonoBehaviour\r\n {\r\n     public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n+    public int maxEnemies = 10; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n     void Start()\r\n     {\r\n"
                },
                {
                    "date": 1703937895552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,10 @@\n             {\r\n                 Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             }\r\n         }\r\n+\r\n+        if(currentEnemyCount)\r\n     }\r\n \r\n     void SpawnNewEnemy()\r\n     {\r\n"
                },
                {
                    "date": 1703937914752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n public class EnemyManager : MonoBehaviour\r\n {\r\n     public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 10; // Maximum number of enemies to spawn\r\n+    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n     void Start()\r\n     {\r\n@@ -27,10 +27,8 @@\n             {\r\n                 Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             }\r\n         }\r\n-\r\n-        if(currentEnemyCount)\r\n     }\r\n \r\n     void SpawnNewEnemy()\r\n     {\r\n"
                },
                {
                    "date": 1703937992395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n public class EnemyManager : MonoBehaviour\r\n {\r\n     public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n+    public int maxEnemies = 10; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n     void Start()\r\n     {\r\n@@ -38,9 +38,10 @@\n             Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n+\r\n+    void OnDestroy()\r\n+    {\r\n+        EnemyHealth.onEnemyKilled -= SpawnNewEnemy;\r\n+    }\r\n }\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1703938038017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n public class EnemyManager : MonoBehaviour\r\n {\r\n     public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 10; // Maximum number of enemies to spawn\r\n+    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n     void Start()\r\n     {\r\n"
                },
                {
                    "date": 1703938143069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+using System.Collections;\r\n+using System.Collections.Generic;\r\n+using UnityEngine;\r\n+\r\n+public class EnemyManager : MonoBehaviour\r\n+{\r\n+    public Transform[] m_SpawnPoints;\r\n+    public GameObject m_EnemyPrefab;\r\n+    public int maxEnemies = 10; // Maximum number of enemies to spawn\r\n+\r\n+    private int currentEnemyCount = 0;\r\n+    private List<Vector3> spawnPositions = new List<Vector3>();\r\n+\r\n+    void Start()\r\n+    {\r\n+        SpawnAllEnemies();\r\n+    }\r\n+\r\n+    void OnEnable()\r\n+    {\r\n+        EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n+    }\r\n+\r\n+    void SpawnAllEnemies()\r\n+    {\r\n+        if (m_EnemyPrefab != null)\r\n+        {\r\n+            foreach (Transform spawnPoint in m_SpawnPoints)\r\n+            {\r\n+                spawnPositions.Add(spawnPoint.position);\r\n+                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    void SpawnNewEnemy()\r\n+    {\r\n+        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n+        {\r\n+            int randomNumber = Mathf.RoundToInt(Random.Range(0f, spawnPositions.Count - 1));\r\n+            Instantiate(m_EnemyPrefab, spawnPositions[randomNumber], Quaternion.identity);\r\n+            currentEnemyCount++;\r\n+        }\r\n+    }\r\n+\r\n+    void OnDestroy()\r\n+    {\r\n+        EnemyHealth.onEnemyKilled -= SpawnNewEnemy;\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1703938151579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n public class EnemyManager : MonoBehaviour\r\n {\r\n     public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 10; // Maximum number of enemies to spawn\r\n+    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n     private List<Vector3> spawnPositions = new List<Vector3>();\r\n \r\n@@ -47,51 +47,4 @@\n     {\r\n         EnemyHealth.onEnemyKilled -= SpawnNewEnemy;\r\n     }\r\n }\r\n-using System.Collections;\r\n-using System.Collections.Generic;\r\n-using UnityEngine;\r\n-\r\n-public class EnemyManager : MonoBehaviour\r\n-{\r\n-    public Transform[] m_SpawnPoints;\r\n-    public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n-\r\n-    private int currentEnemyCount = 0;\r\n-    void Start()\r\n-    {\r\n-        SpawnAllEnemies();\r\n-    }\r\n-\r\n-    void OnEnable()\r\n-    {\r\n-        EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n-    }\r\n-\r\n-    void SpawnAllEnemies()\r\n-    {\r\n-        if (m_EnemyPrefab != null)\r\n-        {\r\n-            foreach (Transform spawnPoint in m_SpawnPoints)\r\n-            {\r\n-                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    void SpawnNewEnemy()\r\n-    {\r\n-        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n-        {\r\n-            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n-            currentEnemyCount++;\r\n-        }\r\n-    }\r\n-\r\n-    void OnDestroy()\r\n-    {\r\n-        EnemyHealth.onEnemyKilled -= SpawnNewEnemy;\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1703938235832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,8 @@\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n-    private List<Vector3> spawnPositions = new List<Vector3>();\r\n-\r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n     }\r\n@@ -26,9 +24,8 @@\n         if (m_EnemyPrefab != null)\r\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n-                spawnPositions.Add(spawnPoint.position);\r\n                 Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             }\r\n         }\r\n     }\r\n@@ -36,15 +33,14 @@\n     void SpawnNewEnemy()\r\n     {\r\n         if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n-            int randomNumber = Mathf.RoundToInt(Random.Range(0f, spawnPositions.Count - 1));\r\n-            Instantiate(m_EnemyPrefab, spawnPositions[randomNumber], Quaternion.identity);\r\n+            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n+}\r\n \r\n-    void OnDestroy()\r\n-    {\r\n-        EnemyHealth.onEnemyKilled -= SpawnNewEnemy;\r\n-    }\r\n-}\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1704120264059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n+\r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n     }\r\n@@ -25,8 +26,9 @@\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n                 Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+                currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n \r\n@@ -39,8 +41,4 @@\n             currentEnemyCount++;\r\n         }\r\n     }\r\n }\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1704120734042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n using UnityEngine;\r\n \r\n public class EnemyManager : MonoBehaviour\r\n {\r\n-    public Transform[] m_SpawnPoints;\r\n+    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.30000019f, -55.7000008f, -13.0600004f), new Vector3(-37.7999992f, -0.77700001f, -38.0999985f), new Vector3(-32.7400017f, 0.335000008f, 34.6920013f), new Vector3(41.3199997f, 0.899999976f, -20.1000004f) };\r\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n@@ -23,11 +23,12 @@\n     void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            foreach (Transform spawnPoint in m_SpawnPoints)\r\n+            for (int i = 0; i < maxEnemies; i++)\r\n             {\r\n-                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+                int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+                Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber], Quaternion.identity);\r\n                 currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n@@ -36,9 +37,9 @@\n     {\r\n         if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n             int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber], Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704120783475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,13 @@\n using UnityEngine;\r\n \r\n public class EnemyManager : MonoBehaviour\r\n {\r\n-    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.30000019f, -55.7000008f, -13.0600004f), new Vector3(-37.7999992f, -0.77700001f, -38.0999985f), new Vector3(-32.7400017f, 0.335000008f, 34.6920013f), new Vector3(41.3199997f, 0.899999976f, -20.1000004f) };\r\n+    public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n-\r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n     }\r\n@@ -23,13 +22,11 @@\n     void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            for (int i = 0; i < maxEnemies; i++)\r\n+            foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n-                int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-                Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber], Quaternion.identity);\r\n-                currentEnemyCount++;\r\n+                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             }\r\n         }\r\n     }\r\n \r\n@@ -37,9 +34,13 @@\n     {\r\n         if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n             int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber], Quaternion.identity);\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n }\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1704120847079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,14 @@\n using UnityEngine;\r\n \r\n public class EnemyManager : MonoBehaviour\r\n {\r\n-    public Transform[] m_SpawnPoints;\r\n+    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.30000019f, -55.7000008f, -13.0600004f), new Vector3(-37.7999992f, -0.77700001f, -38.0999985f), new Vector3(-32.7400017f, 0.335000008f, 34.6920013f), new Vector3(41.3199997f, 0.899999976f, -20.1000004f) };\r\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n+\r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n     }\r\n@@ -22,11 +23,13 @@\n     void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            foreach (Transform spawnPoint in m_SpawnPoints)\r\n+            for (int i = 0; i < maxEnemies; i++)\r\n             {\r\n-                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+                int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+                Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber], Quaternion.identity);\r\n+                currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n \r\n@@ -34,13 +37,9 @@\n     {\r\n         if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n             int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber], Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n }\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1704120876199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+using System.Collections;\r\n+using System.Collections.Generic;\r\n+using UnityEngine;\r\n+\r\n+public class EnemyManager : MonoBehaviour\r\n+{\r\n+    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.30000019f, -55.7000008f, -13.0600004f), new Vector3(-37.7999992f, -0.77700001f, -38.0999985f), new Vector3(-32.7400017f, 0.335000008f, 34.6920013f), new Vector3(41.3199997f, 0.899999976f, -20.1000004f) };\r\n+    public GameObject m_EnemyPrefab;\r\n+    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n+\r\n+    private int currentEnemyCount = 0;\r\n+\r\n+    void Start()\r\n+    {\r\n+        SpawnAllEnemies();\r\n+    }\r\n+\r\n+    void OnEnable()\r\n+    {\r\n+        EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n+    }\r\n+\r\n+    void SpawnAllEnemies()\r\n+    {\r\n+        if (m_EnemyPrefab != null)\r\n+        {\r\n+            for (int i = 0; i < maxEnemies; i++)\r\n+            {\r\n+                int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+                Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber], Quaternion.identity);\r\n+                currentEnemyCount++;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    void SpawnNewEnemy()\r\n+    {\r\n+        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n+        {\r\n+            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber], Quaternion.identity);\r\n+            currentEnemyCount++;\r\n+        }\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1704120910459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,12 +23,11 @@\n     void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            for (int i = 0; i < maxEnemies; i++)\r\n+            for (int i = 0; i < Mathf.Min(maxEnemies, m_SpawnPoints.Length); i++)\r\n             {\r\n-                int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-                Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber], Quaternion.identity);\r\n+                Instantiate(m_EnemyPrefab, m_SpawnPoints[i], Quaternion.identity);\r\n                 currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n@@ -42,49 +41,4 @@\n             currentEnemyCount++;\r\n         }\r\n     }\r\n }\r\n-using System.Collections;\r\n-using System.Collections.Generic;\r\n-using UnityEngine;\r\n-\r\n-public class EnemyManager : MonoBehaviour\r\n-{\r\n-    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.30000019f, -55.7000008f, -13.0600004f), new Vector3(-37.7999992f, -0.77700001f, -38.0999985f), new Vector3(-32.7400017f, 0.335000008f, 34.6920013f), new Vector3(41.3199997f, 0.899999976f, -20.1000004f) };\r\n-    public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n-\r\n-    private int currentEnemyCount = 0;\r\n-\r\n-    void Start()\r\n-    {\r\n-        SpawnAllEnemies();\r\n-    }\r\n-\r\n-    void OnEnable()\r\n-    {\r\n-        EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n-    }\r\n-\r\n-    void SpawnAllEnemies()\r\n-    {\r\n-        if (m_EnemyPrefab != null)\r\n-        {\r\n-            for (int i = 0; i < maxEnemies; i++)\r\n-            {\r\n-                int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-                Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber], Quaternion.identity);\r\n-                currentEnemyCount++;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    void SpawnNewEnemy()\r\n-    {\r\n-        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n-        {\r\n-            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber], Quaternion.identity);\r\n-            currentEnemyCount++;\r\n-        }\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1704120981010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,11 +23,11 @@\n     void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            for (int i = 0; i < Mathf.Min(maxEnemies, m_SpawnPoints.Length); i++)\r\n+            for (int i = 0; i < m_SpawnPoints.Length && i < maxEnemies; i++)\r\n             {\r\n-                Instantiate(m_EnemyPrefab, m_SpawnPoints[i], Quaternion.identity);\r\n+                Instantiate(m_EnemyPrefab, m_SpawnPoints[i].position, Quaternion.identity);\r\n                 currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n"
                },
                {
                    "date": 1704121005030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n using UnityEngine;\r\n \r\n public class EnemyManager : MonoBehaviour\r\n {\r\n-    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.30000019f, -55.7000008f, -13.0600004f), new Vector3(-37.7999992f, -0.77700001f, -38.0999985f), new Vector3(-32.7400017f, 0.335000008f, 34.6920013f), new Vector3(41.3199997f, 0.899999976f, -20.1000004f) };\r\n+    public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n"
                },
                {
                    "date": 1704121034557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n using UnityEngine;\r\n \r\n public class EnemyManager : MonoBehaviour\r\n {\r\n-    public Transform[] m_SpawnPoints;\r\n+    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.30000019f, -55.7000008f, -13.0600004f), new Vector3(-37.7999992f, -0.77700001f, -38.0999985f), new Vector3(-32.7400017f, 0.335000008f, 34.6920013f), new Vector3(41.3199997f, 0.899999976f, -20.1000004f) };\r\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n@@ -25,9 +25,9 @@\n         if (m_EnemyPrefab != null)\r\n         {\r\n             for (int i = 0; i < m_SpawnPoints.Length && i < maxEnemies; i++)\r\n             {\r\n-                Instantiate(m_EnemyPrefab, m_SpawnPoints[i].position, Quaternion.identity);\r\n+                Instantiate(m_EnemyPrefab, m_SpawnPoints[i].m_SpawnPoints, Quaternion.identity);\r\n                 currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n"
                },
                {
                    "date": 1704121063319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n using UnityEngine;\r\n \r\n public class EnemyManager : MonoBehaviour\r\n {\r\n-    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.30000019f, -55.7000008f, -13.0600004f), new Vector3(-37.7999992f, -0.77700001f, -38.0999985f), new Vector3(-32.7400017f, 0.335000008f, 34.6920013f), new Vector3(41.3199997f, 0.899999976f, -20.1000004f) };\r\n+    public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n@@ -23,11 +23,12 @@\n     void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            for (int i = 0; i < m_SpawnPoints.Length && i < maxEnemies; i++)\r\n+            for (int i = 0; i < maxEnemies; i++)\r\n             {\r\n-                Instantiate(m_EnemyPrefab, m_SpawnPoints[i].m_SpawnPoints, Quaternion.identity);\r\n+                int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+                Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n                 currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n@@ -36,9 +37,9 @@\n     {\r\n         if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n             int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber], Quaternion.identity);\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704121222314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n-\r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n     }\r\n@@ -23,13 +22,11 @@\n     void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            for (int i = 0; i < maxEnemies; i++)\r\n+            foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n-                int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-                Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n-                currentEnemyCount++;\r\n+                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             }\r\n         }\r\n     }\r\n \r\n@@ -42,4 +39,8 @@\n             currentEnemyCount++;\r\n         }\r\n     }\r\n }\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1704121312010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,14 @@\n using UnityEngine;\r\n \r\n public class EnemyManager : MonoBehaviour\r\n {\r\n-    public Transform[] m_SpawnPoints;\r\n+    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.30000019f, -55.7000008f, -13.0600004f), new Vector3(-37.7999992f, -0.77700001f, -38.0999985f), new Vector3(-32.7400017f, 0.335000008f, 34.6920013f), new Vector3(41.3199997f, 0.899999976f, -20.1000004f) };\r\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n+\r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n     }\r\n@@ -22,25 +23,21 @@\n     void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            foreach (Transform spawnPoint in m_SpawnPoints)\r\n+            for (int i = 0; i < maxEnemies; i++)\r\n             {\r\n-                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+                Instantiate(m_EnemyPrefab, m_SpawnPoints[i], Quaternion.identity);\r\n+                currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n \r\n     void SpawnNewEnemy()\r\n     {\r\n         if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n-            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[currentEnemyCount], Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n }\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1704121328864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+using System.Collections;\r\n+using System.Collections.Generic;\r\n+using UnityEngine;\r\n+\r\n+public class EnemyManager : MonoBehaviour\r\n+{\r\n+    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.30000019f, -55.7000008f, -13.0600004f), new Vector3(-37.7999992f, -0.77700001f, -38.0999985f), new Vector3(-32.7400017f, 0.335000008f, 34.6920013f), new Vector3(41.3199997f, 0.899999976f, -20.1000004f) };\r\n+    public GameObject m_EnemyPrefab;\r\n+    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n+\r\n+    private int currentEnemyCount = 0;\r\n+\r\n+    void Start()\r\n+    {\r\n+        SpawnAllEnemies();\r\n+    }\r\n+\r\n+    void OnEnable()\r\n+    {\r\n+        EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n+    }\r\n+\r\n+    void SpawnAllEnemies()\r\n+    {\r\n+        if (m_EnemyPrefab != null)\r\n+        {\r\n+            for (int i = 0; i < maxEnemies; i++)\r\n+            {\r\n+                Instantiate(m_EnemyPrefab, m_SpawnPoints[i], Quaternion.identity);\r\n+                currentEnemyCount++;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    void SpawnNewEnemy()\r\n+    {\r\n+        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n+        {\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[currentEnemyCount], Quaternion.identity);\r\n+            currentEnemyCount++;\r\n+        }\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1704121431816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,29 +3,29 @@\n using UnityEngine;\r\n \r\n public class EnemyManager : MonoBehaviour\r\n {\r\n-    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.30000019f, -55.7000008f, -13.0600004f), new Vector3(-37.7999992f, -0.77700001f, -38.0999985f), new Vector3(-32.7400017f, 0.335000008f, 34.6920013f), new Vector3(41.3199997f, 0.899999976f, -20.1000004f) };\r\n+    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.3f, -55.7f, -13.06f), new Vector3(-37.8f, -0.777f, -38.1f), new Vector3(-32.74f, 0.335f, 34.692f), new Vector3(41.32f, 0.9f, -20.1f) };\r\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n \r\n     void Start()\r\n     {\r\n-        SpawnAllEnemies();\r\n+        SpawnAllInitialEnemies();\r\n     }\r\n \r\n     void OnEnable()\r\n     {\r\n         EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n     }\r\n \r\n-    void SpawnAllEnemies()\r\n+    void SpawnAllInitialEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            for (int i = 0; i < maxEnemies; i++)\r\n+            for (int i = 0; i < Mathf.Min(m_SpawnPoints.Length, 4); i++)\r\n             {\r\n                 Instantiate(m_EnemyPrefab, m_SpawnPoints[i], Quaternion.identity);\r\n                 currentEnemyCount++;\r\n             }\r\n@@ -35,52 +35,9 @@\n     void SpawnNewEnemy()\r\n     {\r\n         if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[currentEnemyCount], Quaternion.identity);\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[currentEnemyCount % m_SpawnPoints.Length], Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n }\r\n-using System.Collections;\r\n-using System.Collections.Generic;\r\n-using UnityEngine;\r\n-\r\n-public class EnemyManager : MonoBehaviour\r\n-{\r\n-    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.30000019f, -55.7000008f, -13.0600004f), new Vector3(-37.7999992f, -0.77700001f, -38.0999985f), new Vector3(-32.7400017f, 0.335000008f, 34.6920013f), new Vector3(41.3199997f, 0.899999976f, -20.1000004f) };\r\n-    public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n-\r\n-    private int currentEnemyCount = 0;\r\n-\r\n-    void Start()\r\n-    {\r\n-        SpawnAllEnemies();\r\n-    }\r\n-\r\n-    void OnEnable()\r\n-    {\r\n-        EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n-    }\r\n-\r\n-    void SpawnAllEnemies()\r\n-    {\r\n-        if (m_EnemyPrefab != null)\r\n-        {\r\n-            for (int i = 0; i < maxEnemies; i++)\r\n-            {\r\n-                Instantiate(m_EnemyPrefab, m_SpawnPoints[i], Quaternion.identity);\r\n-                currentEnemyCount++;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    void SpawnNewEnemy()\r\n-    {\r\n-        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n-        {\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[currentEnemyCount], Quaternion.identity);\r\n-            currentEnemyCount++;\r\n-        }\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1704121515944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,41 +3,44 @@\n using UnityEngine;\r\n \r\n public class EnemyManager : MonoBehaviour\r\n {\r\n-    public Vector3[] m_SpawnPoints = new Vector3[4] { new Vector3(8.3f, -55.7f, -13.06f), new Vector3(-37.8f, -0.777f, -38.1f), new Vector3(-32.74f, 0.335f, 34.692f), new Vector3(41.32f, 0.9f, -20.1f) };\r\n+    public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n-\r\n     void Start()\r\n     {\r\n-        SpawnAllInitialEnemies();\r\n+        SpawnAllEnemies();\r\n     }\r\n \r\n     void OnEnable()\r\n     {\r\n         EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n     }\r\n \r\n-    void SpawnAllInitialEnemies()\r\n+    void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            for (int i = 0; i < Mathf.Min(m_SpawnPoints.Length, 4); i++)\r\n+            foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n-                Instantiate(m_EnemyPrefab, m_SpawnPoints[i], Quaternion.identity);\r\n-                currentEnemyCount++;\r\n+                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             }\r\n         }\r\n     }\r\n \r\n     void SpawnNewEnemy()\r\n     {\r\n         if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[currentEnemyCount % m_SpawnPoints.Length], Quaternion.identity);\r\n+            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n }\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1704121533746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     }\r\n \r\n     void SpawnNewEnemy()\r\n     {\r\n-        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n+        while (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n             int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n             Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n"
                },
                {
                    "date": 1704121679004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,12 @@\n public class EnemyManager : MonoBehaviour\r\n {\r\n     public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n+    public int maxEnemies = 8; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n+\r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n     }\r\n@@ -25,22 +26,19 @@\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n                 Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+                currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n \r\n     void SpawnNewEnemy()\r\n     {\r\n-        while (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n+        while (m_EnemyPrefab != null && currentEnemyCount < maxEnemies && currentEnemyCount < 5)\r\n         {\r\n             int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n             Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n }\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1704121703926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,11 @@\n public class EnemyManager : MonoBehaviour\r\n {\r\n     public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 8; // Maximum number of enemies to spawn\r\n+    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n-\r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n     }\r\n@@ -26,19 +25,22 @@\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n                 Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n-                currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n \r\n     void SpawnNewEnemy()\r\n     {\r\n-        while (m_EnemyPrefab != null && currentEnemyCount < maxEnemies && currentEnemyCount < 5)\r\n+        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n             int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n             Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n }\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1704121717338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     }\r\n \r\n     void SpawnNewEnemy()\r\n     {\r\n-        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n+        while (m_EnemyPrefab != null && currentEnemyCount < maxEnemies && currentEnemyCount < 5)\r\n         {\r\n             int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n             Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n"
                },
                {
                    "date": 1704121763895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     }\r\n \r\n     void SpawnNewEnemy()\r\n     {\r\n-        while (m_EnemyPrefab != null && currentEnemyCount < maxEnemies && currentEnemyCount < 5)\r\n+        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n             int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n             Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n"
                },
                {
                    "date": 1704121958066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,13 @@\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n+\r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n+        StartCoroutine(SpawnNewEnemiesRoutine());\r\n     }\r\n \r\n     void OnEnable()\r\n     {\r\n@@ -25,8 +27,9 @@\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n                 Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+                currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n \r\n@@ -38,9 +41,14 @@\n             Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n+\r\n+    IEnumerator SpawnNewEnemiesRoutine()\r\n+    {\r\n+        while (true)\r\n+        {\r\n+            yield return new WaitForSeconds(3f); // Wait for 3 seconds before spawning a new enemy\r\n+            SpawnNewEnemy();\r\n+        }\r\n+    }\r\n }\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1704122019386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n public class EnemyManager : MonoBehaviour\r\n {\r\n     public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n+    public int maxEnemies = 8; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n \r\n     void Start()\r\n@@ -47,8 +47,8 @@\n     {\r\n         while (true)\r\n         {\r\n             yield return new WaitForSeconds(3f); // Wait for 3 seconds before spawning a new enemy\r\n-            SpawnNewEnemy();\r\n+            SpawnAllEnemies();\r\n         }\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704122071197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     IEnumerator SpawnNewEnemiesRoutine()\r\n     {\r\n         while (true)\r\n         {\r\n-            yield return new WaitForSeconds(3f); // Wait for 3 seconds before spawning a new enemy\r\n+            yield return new WaitForSeconds(4f); // Wait for 3 seconds before spawning a new enemy\r\n             SpawnAllEnemies();\r\n         }\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704122078701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     }\r\n \r\n     IEnumerator SpawnNewEnemiesRoutine()\r\n     {\r\n-        while (true)\r\n+        while (true ++)\r\n         {\r\n             yield return new WaitForSeconds(4f); // Wait for 3 seconds before spawning a new enemy\r\n             SpawnAllEnemies();\r\n         }\r\n"
                },
                {
                    "date": 1704122084744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     }\r\n \r\n     IEnumerator SpawnNewEnemiesRoutine()\r\n     {\r\n-        while (true ++)\r\n+        while (true && enem)\r\n         {\r\n             yield return new WaitForSeconds(4f); // Wait for 3 seconds before spawning a new enemy\r\n             SpawnAllEnemies();\r\n         }\r\n"
                },
                {
                    "date": 1704122093158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,21 +32,13 @@\n             }\r\n         }\r\n     }\r\n \r\n-    void SpawnNewEnemy()\r\n-    {\r\n-        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n-        {\r\n-            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n-            currentEnemyCount++;\r\n-        }\r\n-    }\r\n+    \r\n \r\n     IEnumerator SpawnNewEnemiesRoutine()\r\n     {\r\n-        while (true && enem)\r\n+        while (true && currentEnemyCount)\r\n         {\r\n             yield return new WaitForSeconds(4f); // Wait for 3 seconds before spawning a new enemy\r\n             SpawnAllEnemies();\r\n         }\r\n"
                },
                {
                    "date": 1704122104118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,8 @@\n     }\r\n \r\n     void OnEnable()\r\n     {\r\n-        EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n@@ -36,9 +35,9 @@\n     \r\n \r\n     IEnumerator SpawnNewEnemiesRoutine()\r\n     {\r\n-        while (true && currentEnemyCount)\r\n+        while (true && currentEnemyCount<)\r\n         {\r\n             yield return new WaitForSeconds(4f); // Wait for 3 seconds before spawning a new enemy\r\n             SpawnAllEnemies();\r\n         }\r\n"
                },
                {
                    "date": 1704122124940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     \r\n \r\n     IEnumerator SpawnNewEnemiesRoutine()\r\n     {\r\n-        while (true && currentEnemyCount<)\r\n+        while (true && currentEnemyCount<maxEnemies)\r\n         {\r\n             yield return new WaitForSeconds(4f); // Wait for 3 seconds before spawning a new enemy\r\n             SpawnAllEnemies();\r\n         }\r\n"
                },
                {
                    "date": 1704122190446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     \r\n \r\n     IEnumerator SpawnNewEnemiesRoutine()\r\n     {\r\n-        while (true && currentEnemyCount<maxEnemies)\r\n+        while (true && currentEnemyCount<12)\r\n         {\r\n             yield return new WaitForSeconds(4f); // Wait for 3 seconds before spawning a new enemy\r\n             SpawnAllEnemies();\r\n         }\r\n"
                },
                {
                    "date": 1704122236191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n public class EnemyManager : MonoBehaviour\r\n {\r\n     public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 8; // Maximum number of enemies to spawn\r\n+    public int maxEnemies = ; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n \r\n     void Start()\r\n"
                },
                {
                    "date": 1704122243149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n public class EnemyManager : MonoBehaviour\r\n {\r\n     public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = ; // Maximum number of enemies to spawn\r\n+    public int maxEnemies = 8; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n \r\n     void Start()\r\n@@ -35,9 +35,9 @@\n     \r\n \r\n     IEnumerator SpawnNewEnemiesRoutine()\r\n     {\r\n-        while (true && currentEnemyCount<12)\r\n+        while (true && currentEnemyCount<maxEnemies)\r\n         {\r\n             yield return new WaitForSeconds(4f); // Wait for 3 seconds before spawning a new enemy\r\n             SpawnAllEnemies();\r\n         }\r\n"
                },
                {
                    "date": 1704122249677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,8 @@\n     {\r\n         while (true && currentEnemyCount<maxEnemies)\r\n         {\r\n             yield return new WaitForSeconds(4f); // Wait for 3 seconds before spawning a new enemy\r\n-            SpawnAllEnemies();\r\n+            SpawnNewEnemy();\r\n         }\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704122255142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,19 @@\n                 currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n+    void SpawnAllEnemies()\r\n+    {\r\n+        if (m_EnemyPrefab != null)\r\n+        {\r\n+            foreach (Transform spawnPoint in m_SpawnPoints)\r\n+            {\r\n+                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+                currentEnemyCount++;\r\n+            }\r\n+        }\r\n+    }\r\n \r\n     \r\n \r\n     IEnumerator SpawnNewEnemiesRoutine()\r\n"
                },
                {
                    "date": 1704122352576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,17 +30,15 @@\n                 currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n-    void SpawnAllEnemies()\r\n+    void SpawnNewEnemy()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            foreach (Transform spawnPoint in m_SpawnPoints)\r\n-            {\r\n-                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n-                currentEnemyCount++;\r\n-            }\r\n+            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n+            currentEnemyCount++;\r\n         }\r\n     }\r\n \r\n     \r\n"
                },
                {
                    "date": 1704122393249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,13 @@\n     void SpawnNewEnemy()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n-            currentEnemyCount++;\r\n+            foreach (Transform spawnPoint in m_SpawnPoints)\r\n+            {\r\n+                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+                currentEnemyCount++;\r\n+            }\r\n         }\r\n     }\r\n \r\n     \r\n"
                },
                {
                    "date": 1704122401565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,11 @@\n         if (m_EnemyPrefab != null)\r\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n-                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n-                currentEnemyCount++;\r\n+                int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n+            currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n \r\n"
                },
                {
                    "date": 1704122446188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,10 @@\n     }\r\n \r\n     void OnEnable()\r\n     {\r\n+                EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n+\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n"
                },
                {
                    "date": 1704122517190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,43 +17,38 @@\n     }\r\n \r\n     void OnEnable()\r\n     {\r\n-                EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n-\r\n+        EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            foreach (Transform spawnPoint in m_SpawnPoints)\r\n+            for (int i = 0; i < m_SpawnPoints.Length && currentEnemyCount < maxEnemies; i++)\r\n             {\r\n-                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+                Instantiate(m_EnemyPrefab, m_SpawnPoints[i].position, Quaternion.identity);\r\n                 currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n+\r\n     void SpawnNewEnemy()\r\n     {\r\n-        if (m_EnemyPrefab != null)\r\n+        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n-            foreach (Transform spawnPoint in m_SpawnPoints)\r\n-            {\r\n-                int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n             Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n-            }\r\n         }\r\n     }\r\n \r\n-    \r\n-\r\n     IEnumerator SpawnNewEnemiesRoutine()\r\n     {\r\n-        while (true && currentEnemyCount<maxEnemies)\r\n+        while (true && currentEnemyCount < maxEnemies)\r\n         {\r\n-            yield return new WaitForSeconds(4f); // Wait for 3 seconds before spawning a new enemy\r\n+            yield return new WaitForSeconds(4f); // Wait for 4 seconds before spawning a new enemy\r\n             SpawnNewEnemy();\r\n         }\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704122529067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     IEnumerator SpawnNewEnemiesRoutine()\r\n     {\r\n         while (true && currentEnemyCount < maxEnemies)\r\n         {\r\n-            yield return new WaitForSeconds(4f); // Wait for 4 seconds before spawning a new enemy\r\n+            yield return new WaitForSeconds(2f); // Wait for 4 seconds before spawning a new enemy\r\n             SpawnNewEnemy();\r\n         }\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704122550362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     }\r\n \r\n     void OnEnable()\r\n     {\r\n-        EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n+        EnemyHealth.onEnemyKilled += SpawnNewEnemiesRoutine();\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n"
                },
                {
                    "date": 1704122556412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     }\r\n \r\n     void OnEnable()\r\n     {\r\n-        EnemyHealth.onEnemyKilled += SpawnNewEnemiesRoutine();\r\n+        EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n"
                },
                {
                    "date": 1704122780265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n using System.Collections;\r\n-using System.Collections.Generic;\r\n using UnityEngine;\r\n \r\n public class EnemyManager : MonoBehaviour\r\n {\r\n@@ -8,8 +7,9 @@\n     public GameObject m_EnemyPrefab;\r\n     public int maxEnemies = 8; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n+    private int nextSpawnPointIndex = 0;\r\n \r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n@@ -24,9 +24,9 @@\n     void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            for (int i = 0; i < m_SpawnPoints.Length && currentEnemyCount < maxEnemies; i++)\r\n+            for (int i = 0; i < maxEnemies && i < m_SpawnPoints.Length; i++)\r\n             {\r\n                 Instantiate(m_EnemyPrefab, m_SpawnPoints[i].position, Quaternion.identity);\r\n                 currentEnemyCount++;\r\n             }\r\n@@ -34,21 +34,21 @@\n     }\r\n \r\n     void SpawnNewEnemy()\r\n     {\r\n-        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n+        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies && nextSpawnPointIndex < m_SpawnPoints.Length)\r\n         {\r\n-            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[nextSpawnPointIndex].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n+            nextSpawnPointIndex++;\r\n         }\r\n     }\r\n \r\n     IEnumerator SpawnNewEnemiesRoutine()\r\n     {\r\n-        while (true && currentEnemyCount < maxEnemies)\r\n+        while (currentEnemyCount < maxEnemies)\r\n         {\r\n-            yield return new WaitForSeconds(2f); // Wait for 4 seconds before spawning a new enemy\r\n+            yield return new WaitForSeconds(2f); // Wait for 2 seconds before spawning a new enemy\r\n             SpawnNewEnemy();\r\n         }\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704122914230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,15 @@\n     }\r\n \r\n     void SpawnNewEnemy()\r\n     {\r\n-        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies && nextSpawnPointIndex < m_SpawnPoints.Length)\r\n+        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n+            if (nextSpawnPointIndex >= m_SpawnPoints.Length)\r\n+            {\r\n+                nextSpawnPointIndex = 0; // Reset to the first spawn point if we reach the end\r\n+            }\r\n+\r\n             Instantiate(m_EnemyPrefab, m_SpawnPoints[nextSpawnPointIndex].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n             nextSpawnPointIndex++;\r\n         }\r\n"
                },
                {
                    "date": 1704122965121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,18 @@\n using System.Collections;\r\n+using System.Collections.Generic;\r\n using UnityEngine;\r\n \r\n public class EnemyManager : MonoBehaviour\r\n {\r\n     public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 8; // Maximum number of enemies to spawn\r\n+    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n-    private int nextSpawnPointIndex = 0;\r\n-\r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n-        StartCoroutine(SpawnNewEnemiesRoutine());\r\n     }\r\n \r\n     void OnEnable()\r\n     {\r\n@@ -24,36 +22,25 @@\n     void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n-            for (int i = 0; i < maxEnemies && i < m_SpawnPoints.Length; i++)\r\n+            foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n-                Instantiate(m_EnemyPrefab, m_SpawnPoints[i].position, Quaternion.identity);\r\n-                currentEnemyCount++;\r\n+                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             }\r\n         }\r\n     }\r\n \r\n     void SpawnNewEnemy()\r\n     {\r\n         if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n         {\r\n-            if (nextSpawnPointIndex >= m_SpawnPoints.Length)\r\n-            {\r\n-                nextSpawnPointIndex = 0; // Reset to the first spawn point if we reach the end\r\n-            }\r\n-\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[nextSpawnPointIndex].position, Quaternion.identity);\r\n+            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n+            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n-            nextSpawnPointIndex++;\r\n         }\r\n     }\r\n+}\r\n \r\n-    IEnumerator SpawnNewEnemiesRoutine()\r\n-    {\r\n-        while (currentEnemyCount < maxEnemies)\r\n-        {\r\n-            yield return new WaitForSeconds(2f); // Wait for 2 seconds before spawning a new enemy\r\n-            SpawnNewEnemy();\r\n-        }\r\n-    }\r\n-}\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1704123006394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     }\r\n \r\n     void OnEnable()\r\n     {\r\n-        EnemyHealth.onEnemyKilled += SpawnNewEnemy;\r\n+        EnemyHealth.onEnemyKilled += SpawnAllEnemies;\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n"
                },
                {
                    "date": 1704123023418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,17 +29,8 @@\n             }\r\n         }\r\n     }\r\n \r\n-    void SpawnNewEnemy()\r\n-    {\r\n-        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n-        {\r\n-            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n-            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n-            currentEnemyCount++;\r\n-        }\r\n-    }\r\n }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1704123102246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,12 @@\n public class EnemyManager : MonoBehaviour\r\n {\r\n     public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n+    public int maxEnemies = 10; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n+\r\n     void Start()\r\n     {\r\n         SpawnAllEnemies();\r\n     }\r\n@@ -24,14 +25,18 @@\n         if (m_EnemyPrefab != null)\r\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n-                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+                // Check if the maximum number of enemies has been reached\r\n+                if (currentEnemyCount < maxEnemies)\r\n+                {\r\n+                    Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+                    currentEnemyCount++;\r\n+                }\r\n+                else\r\n+                {\r\n+                    break; // Stop spawning if the maximum limit is reached\r\n+                }\r\n             }\r\n         }\r\n     }\r\n-\r\n }\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1704123187946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,26 +17,46 @@\n \r\n     void OnEnable()\r\n     {\r\n         EnemyHealth.onEnemyKilled += SpawnAllEnemies;\r\n+        CheckAndSpawnAdditionalEnemies();\r\n     }\r\n \r\n+    void CheckAndSpawnAdditionalEnemies()\r\n+    {\r\n+        int enemiesToSpawn = maxEnemies - currentEnemyCount;\r\n+\r\n+        if (enemiesToSpawn > 0)\r\n+        {\r\n+            for (int i = 0; i < enemiesToSpawn; i++)\r\n+            {\r\n+                InstantiateEnemy();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n     void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n-                // Check if the maximum number of enemies has been reached\r\n-                if (currentEnemyCount < maxEnemies)\r\n-                {\r\n-                    Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n-                    currentEnemyCount++;\r\n-                }\r\n-                else\r\n-                {\r\n-                    break; // Stop spawning if the maximum limit is reached\r\n-                }\r\n+                InstantiateEnemy();\r\n             }\r\n         }\r\n     }\r\n+\r\n+    void InstantiateEnemy()\r\n+    {\r\n+        if (currentEnemyCount < maxEnemies)\r\n+        {\r\n+            Instantiate(m_EnemyPrefab, GetNextSpawnPoint().position, Quaternion.identity);\r\n+            currentEnemyCount++;\r\n+        }\r\n+    }\r\n+\r\n+    Transform GetNextSpawnPoint()\r\n+    {\r\n+        int index = currentEnemyCount % m_SpawnPoints.Length;\r\n+        return m_SpawnPoints[index];\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1704123457665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n public class EnemyManager : MonoBehaviour\r\n {\r\n     public Transform[] m_SpawnPoints;\r\n     public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 10; // Maximum number of enemies to spawn\r\n+    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n \r\n     private int currentEnemyCount = 0;\r\n \r\n     void Start()\r\n@@ -17,46 +17,30 @@\n \r\n     void OnEnable()\r\n     {\r\n         EnemyHealth.onEnemyKilled += SpawnAllEnemies;\r\n-        CheckAndSpawnAdditionalEnemies();\r\n     }\r\n \r\n-    void CheckAndSpawnAdditionalEnemies()\r\n-    {\r\n-        int enemiesToSpawn = maxEnemies - currentEnemyCount;\r\n-\r\n-        if (enemiesToSpawn > 0)\r\n-        {\r\n-            for (int i = 0; i < enemiesToSpawn; i++)\r\n-            {\r\n-                InstantiateEnemy();\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n     void SpawnAllEnemies()\r\n     {\r\n         if (m_EnemyPrefab != null)\r\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n-                InstantiateEnemy();\r\n+                SpawnSingleTank();\r\n             }\r\n         }\r\n     }\r\n \r\n-    void InstantiateEnemy()\r\n+    // New method to spawn a single tank at one of the spawn points\r\n+    void SpawnSingleTank()\r\n     {\r\n-        if (currentEnemyCount < maxEnemies)\r\n+        // Check if the total number of enemies is less than the maximum limit\r\n+        if (currentEnemyCount < 10 && m_EnemyPrefab != null)\r\n         {\r\n-            Instantiate(m_EnemyPrefab, GetNextSpawnPoint().position, Quaternion.identity);\r\n+            // Choose a random spawn point\r\n+            Transform spawnPoint = m_SpawnPoints[Random.Range(0, m_SpawnPoints.Length)];\r\n+            Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n-\r\n-    Transform GetNextSpawnPoint()\r\n-    {\r\n-        int index = currentEnemyCount % m_SpawnPoints.Length;\r\n-        return m_SpawnPoints[index];\r\n-    }\r\n }\r\n"
                },
                {
                    "date": 1704123559581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,23 +16,19 @@\n     }\r\n \r\n     void OnEnable()\r\n     {\r\n-        EnemyHealth.onEnemyKilled += SpawnAllEnemies;\r\n+        EnemyHealth.onEnemyKilled += HandleEnemyKilled;\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n-        if (m_EnemyPrefab != null)\r\n+        for (int i = 0; i < maxEnemies; i++)\r\n         {\r\n-            foreach (Transform spawnPoint in m_SpawnPoints)\r\n-            {\r\n-                SpawnSingleTank();\r\n-            }\r\n+            SpawnSingleTank();\r\n         }\r\n     }\r\n \r\n-    // New method to spawn a single tank at one of the spawn points\r\n     void SpawnSingleTank()\r\n     {\r\n         // Check if the total number of enemies is less than the maximum limit\r\n         if (currentEnemyCount < 10 && m_EnemyPrefab != null)\r\n@@ -42,5 +38,22 @@\n             Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n+\r\n+    void HandleEnemyKilled()\r\n+    {\r\n+        currentEnemyCount--;\r\n+\r\n+        // Check if all enemies are killed\r\n+        if (currentEnemyCount <= 0)\r\n+        {\r\n+            StartCoroutine(RespawnAfterDelay(2.0f)); // Adjust the delay as needed\r\n+        }\r\n+    }\r\n+\r\n+    IEnumerator RespawnAfterDelay(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+        SpawnSingleTank();\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1704123595965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,19 +16,23 @@\n     }\r\n \r\n     void OnEnable()\r\n     {\r\n-        EnemyHealth.onEnemyKilled += HandleEnemyKilled;\r\n+        EnemyHealth.onEnemyKilled += SpawnAllEnemies;\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n-        for (int i = 0; i < maxEnemies; i++)\r\n+        if (m_EnemyPrefab != null)\r\n         {\r\n-            SpawnSingleTank();\r\n+            foreach (Transform spawnPoint in m_SpawnPoints)\r\n+            {\r\n+                SpawnSingleTank();\r\n+            }\r\n         }\r\n     }\r\n \r\n+    // New method to spawn a single tank at one of the spawn points\r\n     void SpawnSingleTank()\r\n     {\r\n         // Check if the total number of enemies is less than the maximum limit\r\n         if (currentEnemyCount < 10 && m_EnemyPrefab != null)\r\n@@ -38,22 +42,5 @@\n             Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n     }\r\n-\r\n-    void HandleEnemyKilled()\r\n-    {\r\n-        currentEnemyCount--;\r\n-\r\n-        // Check if all enemies are killed\r\n-        if (currentEnemyCount <= 0)\r\n-        {\r\n-            StartCoroutine(RespawnAfterDelay(2.0f)); // Adjust the delay as needed\r\n-        }\r\n-    }\r\n-\r\n-    IEnumerator RespawnAfterDelay(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-        SpawnSingleTank();\r\n-    }\r\n }\r\n"
                },
                {
                    "date": 1704123635765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     }\r\n \r\n     void OnEnable()\r\n     {\r\n-        EnemyHealth.onEnemyKilled += SpawnAllEnemies;\r\n+        EnemyHealth.onEnemyKilled += SpawnSingleTank;\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n"
                },
                {
                    "date": 1704123641223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     // New method to spawn a single tank at one of the spawn points\r\n     void SpawnSingleTank()\r\n     {\r\n         // Check if the total number of enemies is less than the maximum limit\r\n-        if (currentEnemyCount < 10 && m_EnemyPrefab != null)\r\n+        if (currentEnemyCount < 12 && m_EnemyPrefab != null)\r\n         {\r\n             // Choose a random spawn point\r\n             Transform spawnPoint = m_SpawnPoints[Random.Range(0, m_SpawnPoints.Length)];\r\n             Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n"
                },
                {
                    "date": 1704123760766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         if (m_EnemyPrefab != null)\r\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n-                SpawnSingleTank();\r\n+                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             }\r\n         }\r\n     }\r\n \r\n"
                },
                {
                    "date": 1704123792795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+using System.Collections;\r\n+using System.Collections.Generic;\r\n+using UnityEngine;\r\n+\r\n+public class EnemyManager : MonoBehaviour\r\n+{\r\n+    public Transform[] m_SpawnPoints;\r\n+    public GameObject m_EnemyPrefab;\r\n+    public int maxEnemies = 10; // Maximum number of enemies to spawn\r\n+\r\n+    private int currentEnemyCount = 0;\r\n+\r\n+    void Start()\r\n+    {\r\n+        SpawnAllEnemies();\r\n+    }\r\n+\r\n+    void OnEnable()\r\n+    {\r\n+        EnemyHealth.onEnemyKilled += SpawnSingleTank;\r\n+    }\r\n+\r\n+    void SpawnAllEnemies()\r\n+    {\r\n+        if (m_EnemyPrefab != null)\r\n+        {\r\n+            foreach (Transform spawnPoint in m_SpawnPoints)\r\n+            {\r\n+                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // New method to spawn a single tank at one of the spawn points\r\n+    void SpawnSingleTank()\r\n+    {\r\n+        // Check if the total number of enemies is less than the maximum limit\r\n+        if (currentEnemyCount < 12 && m_EnemyPrefab != null)\r\n+        {\r\n+            // Choose a random spawn point\r\n+            Transform spawnPoint = m_SpawnPoints[Random.Range(0, m_SpawnPoints.Length)];\r\n+            Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+            currentEnemyCount++;\r\n+        }\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1704123829564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,59 +34,15 @@\n     // New method to spawn a single tank at one of the spawn points\r\n     void SpawnSingleTank()\r\n     {\r\n         // Check if the total number of enemies is less than the maximum limit\r\n-        if (currentEnemyCount < 12 && m_EnemyPrefab != null)\r\n+        if (currentEnemyCount < maxEnemies && m_EnemyPrefab != null)\r\n         {\r\n             // Choose a random spawn point\r\n             Transform spawnPoint = m_SpawnPoints[Random.Range(0, m_SpawnPoints.Length)];\r\n             Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n-    }\r\n-}\r\n-using System.Collections;\r\n-using System.Collections.Generic;\r\n-using UnityEngine;\r\n \r\n-public class EnemyManager : MonoBehaviour\r\n-{\r\n-    public Transform[] m_SpawnPoints;\r\n-    public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n-\r\n-    private int currentEnemyCount = 0;\r\n-\r\n-    void Start()\r\n-    {\r\n-        SpawnAllEnemies();\r\n+        EnemyHealth.onEnemyKilled\r\n     }\r\n-\r\n-    void OnEnable()\r\n-    {\r\n-        EnemyHealth.onEnemyKilled += SpawnSingleTank;\r\n-    }\r\n-\r\n-    void SpawnAllEnemies()\r\n-    {\r\n-        if (m_EnemyPrefab != null)\r\n-        {\r\n-            foreach (Transform spawnPoint in m_SpawnPoints)\r\n-            {\r\n-                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    // New method to spawn a single tank at one of the spawn points\r\n-    void SpawnSingleTank()\r\n-    {\r\n-        // Check if the total number of enemies is less than the maximum limit\r\n-        if (currentEnemyCount < 12 && m_EnemyPrefab != null)\r\n-        {\r\n-            // Choose a random spawn point\r\n-            Transform spawnPoint = m_SpawnPoints[Random.Range(0, m_SpawnPoints.Length)];\r\n-            Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n-            currentEnemyCount++;\r\n-        }\r\n-    }\r\n }\r\n"
                },
                {
                    "date": 1704123837739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,7 +42,7 @@\n             Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n \r\n-        EnemyHealth.onEnemyKilled\r\n+        if(EnemyHealth.onEnemyKilled\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704123849261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,7 +42,7 @@\n             Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n \r\n-        if(EnemyHealth.onEnemyKilled\r\n+        if(EnemyHealth.onEnemyKilled = true;)\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704123855109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,7 +42,7 @@\n             Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n \r\n-        if(EnemyHealth.onEnemyKilled = true;)\r\n+        if(EnemyHealth.onEnemyKilled == true;)\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704123889245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,7 +42,7 @@\n             Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n \r\n-        if(EnemyHealth.onEnemyKilled == true;)\r\n+        if(EnemyHealth.onEnemyKilled)\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704123900365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,7 +42,6 @@\n             Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n \r\n-        if(EnemyHealth.onEnemyKilled)\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704123914799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+using System.Collections;\r\n+using System.Collections.Generic;\r\n+using UnityEngine;\r\n+\r\n+public class EnemyManager : MonoBehaviour\r\n+{\r\n+    public Transform[] m_SpawnPoints;\r\n+    public GameObject m_EnemyPrefab;\r\n+    public int maxEnemies = 10; // Maximum number of enemies to spawn\r\n+\r\n+    private int currentEnemyCount = 0;\r\n+\r\n+    void Start()\r\n+    {\r\n+        SpawnAllEnemies();\r\n+    }\r\n+\r\n+    void OnEnable()\r\n+    {\r\n+        EnemyHealth.onEnemyKilled += SpawnSingleTank;\r\n+        EnemyHealth.onEnemyKilled += SpawnSingleTank;\r\n+    }\r\n+\r\n+    void SpawnAllEnemies()\r\n+    {\r\n+        if (m_EnemyPrefab != null)\r\n+        {\r\n+            foreach (Transform spawnPoint in m_SpawnPoints)\r\n+            {\r\n+                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // New method to spawn a single tank at one of the spawn points\r\n+    void SpawnSingleTank()\r\n+    {\r\n+        // Check if the total number of enemies is less than the maximum limit\r\n+        if (currentEnemyCount < maxEnemies && m_EnemyPrefab != null)\r\n+        {\r\n+            // Choose a random spawn point\r\n+            Transform spawnPoint = m_SpawnPoints[Random.Range(0, m_SpawnPoints.Length)];\r\n+            Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+            currentEnemyCount++;\r\n+        }\r\n+\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1704124107773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n     void OnEnable()\r\n     {\r\n         EnemyHealth.onEnemyKilled += SpawnSingleTank;\r\n-        EnemyHealth.onEnemyKilled += SpawnSingleTank;\r\n+        EnemyHealth.onEnemyKilled += () => currentEnemyCount--;\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n@@ -45,51 +45,4 @@\n         }\r\n \r\n     }\r\n }\r\n-using System.Collections;\r\n-using System.Collections.Generic;\r\n-using UnityEngine;\r\n-\r\n-public class EnemyManager : MonoBehaviour\r\n-{\r\n-    public Transform[] m_SpawnPoints;\r\n-    public GameObject m_EnemyPrefab;\r\n-    public int maxEnemies = 10; // Maximum number of enemies to spawn\r\n-\r\n-    private int currentEnemyCount = 0;\r\n-\r\n-    void Start()\r\n-    {\r\n-        SpawnAllEnemies();\r\n-    }\r\n-\r\n-    void OnEnable()\r\n-    {\r\n-        EnemyHealth.onEnemyKilled += SpawnSingleTank;\r\n-    }\r\n-\r\n-    void SpawnAllEnemies()\r\n-    {\r\n-        if (m_EnemyPrefab != null)\r\n-        {\r\n-            foreach (Transform spawnPoint in m_SpawnPoints)\r\n-            {\r\n-                Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    // New method to spawn a single tank at one of the spawn points\r\n-    void SpawnSingleTank()\r\n-    {\r\n-        // Check if the total number of enemies is less than the maximum limit\r\n-        if (currentEnemyCount < maxEnemies && m_EnemyPrefab != null)\r\n-        {\r\n-            // Choose a random spawn point\r\n-            Transform spawnPoint = m_SpawnPoints[Random.Range(0, m_SpawnPoints.Length)];\r\n-            Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n-            currentEnemyCount++;\r\n-        }\r\n-\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1704124322517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,8 @@\n \r\n     void OnEnable()\r\n     {\r\n         EnemyHealth.onEnemyKilled += SpawnSingleTank;\r\n-        EnemyHealth.onEnemyKilled += () => currentEnemyCount--;\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n@@ -27,8 +26,9 @@\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n                 Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n+                currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n \r\n@@ -42,7 +42,6 @@\n             Transform spawnPoint = m_SpawnPoints[Random.Range(0, m_SpawnPoints.Length)];\r\n             Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n-\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1704124358365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n \r\n     void OnEnable()\r\n     {\r\n         EnemyHealth.onEnemyKilled += SpawnSingleTank;\r\n+        EnemyHealth.onEnemyKilled += () => currentEnemyCount--;\r\n     }\r\n \r\n     void SpawnAllEnemies()\r\n     {\r\n@@ -26,9 +27,8 @@\n         {\r\n             foreach (Transform spawnPoint in m_SpawnPoints)\r\n             {\r\n                 Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n-                currentEnemyCount++;\r\n             }\r\n         }\r\n     }\r\n \r\n@@ -42,6 +42,7 @@\n             Transform spawnPoint = m_SpawnPoints[Random.Range(0, m_SpawnPoints.Length)];\r\n             Instantiate(m_EnemyPrefab, spawnPoint.position, Quaternion.identity);\r\n             currentEnemyCount++;\r\n         }\r\n+\r\n     }\r\n }\r\n"
                }
            ],
            "date": 1703937066728,
            "name": "Commit-0",
            "content": "using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\n\r\npublic class EnemyManager : MonoBehaviour\r\n{\r\n    public Transform[] m_SpawnPoints;\r\n    public GameObject m_EnemyPrefab;\r\n    public int maxEnemies = 5; // Maximum number of enemies to spawn\r\n\r\n    private int currentEnemyCount = 0;\r\n    void Start()\r\n    {\r\n        SpawnAllEnemies();\r\n    }\r\n\r\n    void OnEnable()\r\n{\r\n    InvokeRepeating(\"SpawnNewEnemy\", 0f, 5f); // Spawn a new enemy every 5 seconds\r\n}\r\n\r\nvoid SpawnNewEnemy()\r\n{\r\n    if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n    {\r\n        int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n        Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n        currentEnemyCount++;\r\n    }\r\n}\r\n\r\n\r\n    void SpawnNewEnemy()\r\n    {\r\n        if (m_EnemyPrefab != null && currentEnemyCount < maxEnemies)\r\n        {\r\n            int randomNumber = Mathf.RoundToInt(Random.Range(0f, m_SpawnPoints.Length - 1));\r\n            Instantiate(m_EnemyPrefab, m_SpawnPoints[randomNumber].position, Quaternion.identity);\r\n            currentEnemyCount++;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"
        }
    ]
}