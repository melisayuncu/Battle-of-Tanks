{
    "sourceFile": "Assets/Scripts/EnemyHealth.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1703769547061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1703769636385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         {\r\n             // Add any death-related logic here (e.g., play death animation, spawn effects)\r\n             Debug.Log(\"Enemy has died!\");\r\n             Destroy(gameObject); // Destroy the object when it dies\r\n-            \r\n+            Score.score\r\n         }\r\n \r\n         if(onEnemyKilled != null)\r\n         {\r\n"
                },
                {
                    "date": 1703769649132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         {\r\n             // Add any death-related logic here (e.g., play death animation, spawn effects)\r\n             Debug.Log(\"Enemy has died!\");\r\n             Destroy(gameObject); // Destroy the object when it dies\r\n-            Score.score\r\n+            Score.scorecount +\r\n         }\r\n \r\n         if(onEnemyKilled != null)\r\n         {\r\n"
                },
                {
                    "date": 1703769665444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         {\r\n             // Add any death-related logic here (e.g., play death animation, spawn effects)\r\n             Debug.Log(\"Enemy has died!\");\r\n             Destroy(gameObject); // Destroy the object when it dies\r\n-            Score.scorecount +\r\n+            Score.scoreCount += 10;\r\n         }\r\n \r\n         if(onEnemyKilled != null)\r\n         {\r\n"
                },
                {
                    "date": 1703769710629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         {\r\n             // Add any death-related logic here (e.g., play death animation, spawn effects)\r\n             Debug.Log(\"Enemy has died!\");\r\n             Destroy(gameObject); // Destroy the object when it dies\r\n-            Score.scoreCount += 10;\r\n+            Score.scorecount += 10;\r\n         }\r\n \r\n         if(onEnemyKilled != null)\r\n         {\r\n"
                },
                {
                    "date": 1703930922255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,20 @@\n \r\n     public delegate void EnemyKilled();\r\n     public static event EnemyKilled onEnemyKilled;\r\n \r\n+    public GameObject explosionPrefab;\r\n+    private AudioSource explosionAudio;\r\n+    private ParticleSystem explosionParticles;\r\n+\r\n+    void Awake()\r\n+    {\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        explosionParticles.gameObject.SetActive(false);\r\n+\r\n+    }\r\n+\r\n     void Start()\r\n     {\r\n         currentHealth = maxHealth;\r\n     }\r\n@@ -27,12 +39,15 @@\n     void Die()\r\n     {\r\n         if(gameObject != null)\r\n         {\r\n+            explosionParticles.transform.position = transform.position;\r\n+            explosionParticles.gameObject.SetActive(true);\r\n+            explosionParticles.Play();\r\n+            explosionAudio.Play();\r\n             // Add any death-related logic here (e.g., play death animation, spawn effects)\r\n-            Debug.Log(\"Enemy has died!\");\r\n+            //Debug.Log(\"Enemy has died!\");\r\n             Destroy(gameObject); // Destroy the object when it dies\r\n-            Score.scorecount += 10;\r\n         }\r\n \r\n         if(onEnemyKilled != null)\r\n         {\r\n"
                },
                {
                    "date": 1703931027515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,8 @@\n     {\r\n         explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n         explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n         explosionParticles.gameObject.SetActive(false);\r\n-\r\n     }\r\n \r\n     void Start()\r\n     {\r\n@@ -37,22 +36,26 @@\n     }\r\n \r\n     void Die()\r\n     {\r\n-        if(gameObject != null)\r\n+        if (gameObject != null)\r\n         {\r\n             explosionParticles.transform.position = transform.position;\r\n             explosionParticles.gameObject.SetActive(true);\r\n             explosionParticles.Play();\r\n             explosionAudio.Play();\r\n-            // Add any death-related logic here (e.g., play death animation, spawn effects)\r\n-            //Debug.Log(\"Enemy has died!\");\r\n-            Destroy(gameObject); // Destroy the object when it dies\r\n+\r\n+            StartCoroutine(DestroyAfterDelay(2f)); // Adjust the delay time as needed\r\n         }\r\n \r\n-        if(onEnemyKilled != null)\r\n+        if (onEnemyKilled != null)\r\n         {\r\n             onEnemyKilled();\r\n         }\r\n-        \r\n     }\r\n+\r\n+    IEnumerator DestroyAfterDelay(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+        Destroy(gameObject);\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1703931096502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n             explosionParticles.gameObject.SetActive(true);\r\n             explosionParticles.Play();\r\n             explosionAudio.Play();\r\n \r\n-            StartCoroutine(DestroyAfterDelay(2f)); // Adjust the delay time as needed\r\n+            StartCoroutine(DestroyAfterDelay(explosionParticles.main.duration));\r\n         }\r\n \r\n         if (onEnemyKilled != null)\r\n         {\r\n"
                },
                {
                    "date": 1703931141089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,19 +8,8 @@\n \r\n     public delegate void EnemyKilled();\r\n     public static event EnemyKilled onEnemyKilled;\r\n \r\n-    public GameObject explosionPrefab;\r\n-    private AudioSource explosionAudio;\r\n-    private ParticleSystem explosionParticles;\r\n-\r\n-    void Awake()\r\n-    {\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-        explosionParticles.gameObject.SetActive(false);\r\n-    }\r\n-\r\n     void Start()\r\n     {\r\n         currentHealth = maxHealth;\r\n     }\r\n@@ -36,26 +25,19 @@\n     }\r\n \r\n     void Die()\r\n     {\r\n-        if (gameObject != null)\r\n+        if(gameObject != null)\r\n         {\r\n-            explosionParticles.transform.position = transform.position;\r\n-            explosionParticles.gameObject.SetActive(true);\r\n-            explosionParticles.Play();\r\n-            explosionAudio.Play();\r\n-\r\n-            StartCoroutine(DestroyAfterDelay(explosionParticles.main.duration));\r\n+            // Add any death-related logic here (e.g., play death animation, spawn effects)\r\n+            Debug.Log(\"Enemy has died!\");\r\n+            Destroy(gameObject); // Destroy the object when it dies\r\n+            Score.scorecount += 10;\r\n         }\r\n \r\n-        if (onEnemyKilled != null)\r\n+        if(onEnemyKilled != null)\r\n         {\r\n             onEnemyKilled();\r\n         }\r\n+        \r\n     }\r\n-\r\n-    IEnumerator DestroyAfterDelay(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-        Destroy(gameObject);\r\n-    }\r\n }\r\n"
                },
                {
                    "date": 1703931194704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,19 @@\n \r\n     public delegate void EnemyKilled();\r\n     public static event EnemyKilled onEnemyKilled;\r\n \r\n+    public GameObject explosionPrefab;\r\n+    private AudioSource explosionAudio;\r\n+    private ParticleSystem explosionParticles;\r\n+\r\n+    void Awake()\r\n+    {\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        explosionParticles.gameObject.SetActive(false);\r\n+    }\r\n+\r\n     void Start()\r\n     {\r\n         currentHealth = maxHealth;\r\n     }\r\n@@ -25,19 +36,31 @@\n     }\r\n \r\n     void Die()\r\n     {\r\n-        if(gameObject != null)\r\n+        if (gameObject != null)\r\n         {\r\n-            // Add any death-related logic here (e.g., play death animation, spawn effects)\r\n-            Debug.Log(\"Enemy has died!\");\r\n-            Destroy(gameObject); // Destroy the object when it dies\r\n-            Score.scorecount += 10;\r\n+            StartCoroutine(ExplodeAfterDelay(0.1f)); // Delay before exploding (adjust as needed)\r\n         }\r\n+    }\r\n \r\n-        if(onEnemyKilled != null)\r\n+    IEnumerator ExplodeAfterDelay(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+\r\n+        // Explode\r\n+        explosionParticles.transform.position = transform.position;\r\n+        explosionParticles.gameObject.SetActive(true);\r\n+        explosionParticles.Play();\r\n+        explosionAudio.Play();\r\n+\r\n+        // Destroy the object after the explosion\r\n+        yield return new WaitForSeconds(explosionParticles.main.duration);\r\n+        Destroy(gameObject);\r\n+\r\n+        // Notify that the enemy was killed\r\n+        if (onEnemyKilled != null)\r\n         {\r\n             onEnemyKilled();\r\n         }\r\n-        \r\n     }\r\n }\r\n"
                },
                {
                    "date": 1703931224904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,19 +8,8 @@\n \r\n     public delegate void EnemyKilled();\r\n     public static event EnemyKilled onEnemyKilled;\r\n \r\n-    public GameObject explosionPrefab;\r\n-    private AudioSource explosionAudio;\r\n-    private ParticleSystem explosionParticles;\r\n-\r\n-    void Awake()\r\n-    {\r\n-        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n-        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n-        explosionParticles.gameObject.SetActive(false);\r\n-    }\r\n-\r\n     void Start()\r\n     {\r\n         currentHealth = maxHealth;\r\n     }\r\n@@ -36,31 +25,19 @@\n     }\r\n \r\n     void Die()\r\n     {\r\n-        if (gameObject != null)\r\n+        if(gameObject != null)\r\n         {\r\n-            StartCoroutine(ExplodeAfterDelay(0.1f)); // Delay before exploding (adjust as needed)\r\n+            // Add any death-related logic here (e.g., play death animation, spawn effects)\r\n+            Debug.Log(\"Enemy has died!\");\r\n+            Destroy(gameObject); // Destroy the object when it dies\r\n+            Score.scorecount += 10;\r\n         }\r\n-    }\r\n \r\n-    IEnumerator ExplodeAfterDelay(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-\r\n-        // Explode\r\n-        explosionParticles.transform.position = transform.position;\r\n-        explosionParticles.gameObject.SetActive(true);\r\n-        explosionParticles.Play();\r\n-        explosionAudio.Play();\r\n-\r\n-        // Destroy the object after the explosion\r\n-        yield return new WaitForSeconds(explosionParticles.main.duration);\r\n-        Destroy(gameObject);\r\n-\r\n-        // Notify that the enemy was killed\r\n-        if (onEnemyKilled != null)\r\n+        if(onEnemyKilled != null)\r\n         {\r\n             onEnemyKilled();\r\n         }\r\n+        \r\n     }\r\n }\r\n"
                },
                {
                    "date": 1703938398027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,22 @@\n {\r\n     public int maxHealth = 5;\r\n     private int currentHealth;\r\n \r\n+    public GameObject explosionPrefab;\r\n+    public AudioSource explosionAudio;\r\n+    public ParticleSystem explosionParticles;\r\n+\r\n     public delegate void EnemyKilled();\r\n     public static event EnemyKilled onEnemyKilled;\r\n \r\n     void Start()\r\n     {\r\n         currentHealth = maxHealth;\r\n+\r\n+        explosionParticles = Instantiate(explosionPrefab).GetComponent<ParticleSystem>();\r\n+        explosionAudio = explosionParticles.GetComponent<AudioSource>();\r\n+        explosionParticles.gameObject.SetActive(false);\r\n     }\r\n \r\n     public void TakeDamage(int damage)\r\n     {\r\n@@ -25,19 +33,32 @@\n     }\r\n \r\n     void Die()\r\n     {\r\n-        if(gameObject != null)\r\n+        if (gameObject != null)\r\n         {\r\n-            // Add any death-related logic here (e.g., play death animation, spawn effects)\r\n+            // Play explosion effect\r\n+            explosionParticles.transform.position = transform.position;\r\n+            explosionParticles.gameObject.SetActive(true);\r\n+            explosionParticles.Play();\r\n+            explosionAudio.Play();\r\n+\r\n+            // Wait for a delay before destroying the enemy\r\n+            StartCoroutine(DelayedDestroy(2f));\r\n+\r\n+            // Add any other death-related logic here\r\n             Debug.Log(\"Enemy has died!\");\r\n-            Destroy(gameObject); // Destroy the object when it dies\r\n             Score.scorecount += 10;\r\n         }\r\n \r\n-        if(onEnemyKilled != null)\r\n+        if (onEnemyKilled != null)\r\n         {\r\n             onEnemyKilled();\r\n         }\r\n-        \r\n     }\r\n+\r\n+    IEnumerator DelayedDestroy(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+        Destroy(gameObject);\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1703938446963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,10 +55,6 @@\n             onEnemyKilled();\r\n         }\r\n     }\r\n \r\n-    IEnumerator DelayedDestroy(float delay)\r\n-    {\r\n-        yield return new WaitForSeconds(delay);\r\n-        Destroy(gameObject);\r\n-    }\r\n+    \r\n }\r\n"
                },
                {
                    "date": 1703938488842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,6 +55,10 @@\n             onEnemyKilled();\r\n         }\r\n     }\r\n \r\n-    \r\n+    IEnumerator DelayedDestroy(float delay)\r\n+    {\r\n+        yield return new WaitForSeconds(delay);\r\n+        Destroy(gameObject);\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1703938507243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n             explosionParticles.Play();\r\n             explosionAudio.Play();\r\n \r\n             // Wait for a delay before destroying the enemy\r\n-            StartCoroutine(DelayedDestroy(2f));\r\n+            StartCoroutine(DelayedDestroy(0.001f));\r\n \r\n             // Add any other death-related logic here\r\n             Debug.Log(\"Enemy has died!\");\r\n             Score.scorecount += 10;\r\n"
                },
                {
                    "date": 1704126247464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n using UnityEngine;\r\n \r\n public class EnemyHealth : MonoBehaviour\r\n {\r\n+    public int lastScore;\r\n     public int maxHealth = 5;\r\n     private int currentHealth;\r\n \r\n     public GameObject explosionPrefab;\r\n@@ -47,8 +48,11 @@\n \r\n             // Add any other death-related logic here\r\n             Debug.Log(\"Enemy has died!\");\r\n             Score.scorecount += 10;\r\n+            lastScore = Score.scorecount;\r\n+            PlayerPrefs.SetInt(\"LastScore\", lastScore);\r\n+            PlayerPrefs.Save();\r\n         }\r\n \r\n         if (onEnemyKilled != null)\r\n         {\r\n@@ -60,5 +64,5 @@\n     {\r\n         yield return new WaitForSeconds(delay);\r\n         Destroy(gameObject);\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1703769547061,
            "name": "Commit-0",
            "content": "using System.Collections;\r\nusing UnityEngine;\r\n\r\npublic class EnemyHealth : MonoBehaviour\r\n{\r\n    public int maxHealth = 5;\r\n    private int currentHealth;\r\n\r\n    public delegate void EnemyKilled();\r\n    public static event EnemyKilled onEnemyKilled;\r\n\r\n    void Start()\r\n    {\r\n        currentHealth = maxHealth;\r\n    }\r\n\r\n    public void TakeDamage(int damage)\r\n    {\r\n        currentHealth -= damage;\r\n\r\n        if (currentHealth <= 0)\r\n        {\r\n            Die();\r\n        }\r\n    }\r\n\r\n    void Die()\r\n    {\r\n        if(gameObject != null)\r\n        {\r\n            // Add any death-related logic here (e.g., play death animation, spawn effects)\r\n            Debug.Log(\"Enemy has died!\");\r\n            Destroy(gameObject); // Destroy the object when it dies\r\n            \r\n        }\r\n\r\n        if(onEnemyKilled != null)\r\n        {\r\n            onEnemyKilled();\r\n        }\r\n        \r\n    }\r\n}\r\n"
        }
    ]
}